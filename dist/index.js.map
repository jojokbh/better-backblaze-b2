{"version":3,"file":"index.js","sources":["../src/constants.js","../src/core/progress-handler.js","../src/core/http-client.js","../src/core/retry-handler.js","../src/utils/headers.js","../src/utils/validation.js","../src/managers/auth-manager.js","../src/utils/endpoints.js","../src/managers/bucket-manager.js","../src/utils/crypto.js","../src/managers/file-manager.js","../src/managers/key-manager.js","../src/b2-client.js","../src/core/error-handler.js","../src/index.js"],"sourcesContent":["// API constants and configuration values\n\n// B2 API Base URLs\nexport const B2_API_BASE_URL = 'https://api.backblazeb2.com';\nexport const B2_API_VERSION = 'v2';\n\n// API Endpoints\nexport const API_ENDPOINTS = {\n  // Authentication\n  AUTHORIZE_ACCOUNT: '/b2api/v4/b2_authorize_account',\n\n  // Bucket operations\n  CREATE_BUCKET: '/b2api/v2/b2_create_bucket',\n  DELETE_BUCKET: '/b2api/v2/b2_delete_bucket',\n  LIST_BUCKETS: '/b2api/v2/b2_list_buckets',\n  UPDATE_BUCKET: '/b2api/v2/b2_update_bucket',\n  GET_UPLOAD_URL: '/b2api/v2/b2_get_upload_url',\n\n  // File operations\n  UPLOAD_FILE: '/b2api/v2/b2_upload_file',\n  DOWNLOAD_FILE_BY_ID: '/b2api/v2/b2_download_file_by_id',\n  DOWNLOAD_FILE_BY_NAME: '/file',\n  LIST_FILE_NAMES: '/b2api/v2/b2_list_file_names',\n  LIST_FILE_VERSIONS: '/b2api/v2/b2_list_file_versions',\n  GET_FILE_INFO: '/b2api/v2/b2_get_file_info',\n  DELETE_FILE_VERSION: '/b2api/v2/b2_delete_file_version',\n  HIDE_FILE: '/b2api/v2/b2_hide_file',\n\n  // Large file operations\n  START_LARGE_FILE: '/b2api/v2/b2_start_large_file',\n  GET_UPLOAD_PART_URL: '/b2api/v2/b2_get_upload_part_url',\n  UPLOAD_PART: '/b2api/v2/b2_upload_part',\n  FINISH_LARGE_FILE: '/b2api/v2/b2_finish_large_file',\n  CANCEL_LARGE_FILE: '/b2api/v2/b2_cancel_large_file',\n  LIST_PARTS: '/b2api/v2/b2_list_parts',\n  LIST_UNFINISHED_LARGE_FILES: '/b2api/v2/b2_list_unfinished_large_files',\n\n  // Key management\n  CREATE_KEY: '/b2api/v2/b2_create_key',\n  DELETE_KEY: '/b2api/v2/b2_delete_key',\n  LIST_KEYS: '/b2api/v2/b2_list_keys',\n\n  // Download authorization\n  GET_DOWNLOAD_AUTHORIZATION: '/b2api/v2/b2_get_download_authorization',\n};\n\n// Bucket Types\nexport const BUCKET_TYPES = {\n  ALL_PRIVATE: 'allPrivate',\n  ALL_PUBLIC: 'allPublic',\n};\n\n// Key Capabilities\nexport const KEY_CAPABILITIES = {\n  LIST_KEYS: 'listKeys',\n  WRITE_KEYS: 'writeKeys',\n  DELETE_KEYS: 'deleteKeys',\n  LIST_BUCKETS: 'listBuckets',\n  WRITE_BUCKETS: 'writeBuckets',\n  DELETE_BUCKETS: 'deleteBuckets',\n  LIST_ALL_BUCKET_NAMES: 'listAllBucketNames',\n  LIST_FILES: 'listFiles',\n  READ_FILES: 'readFiles',\n  SHARE_FILES: 'shareFiles',\n  WRITE_FILES: 'writeFiles',\n  DELETE_FILES: 'deleteFiles',\n};\n\n// HTTP Status Codes\nexport const HTTP_STATUS = {\n  OK: 200,\n  CREATED: 201,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  REQUEST_TIMEOUT: 408,\n  TOO_MANY_REQUESTS: 429,\n  INTERNAL_SERVER_ERROR: 500,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n};\n\n// Default Configuration\nexport const DEFAULT_CONFIG = {\n  // Retry configuration\n  RETRY_ATTEMPTS: 3,\n  RETRY_DELAY: 1000, // 1 second\n  RETRY_DELAY_MULTIPLIER: 2,\n  MAX_RETRY_DELAY: 30000, // 30 seconds\n\n  // Request configuration\n  REQUEST_TIMEOUT: 30000, // 30 seconds\n  UPLOAD_TIMEOUT: 300000, // 5 minutes for uploads\n\n  // Large file configuration\n  RECOMMENDED_PART_SIZE: 100 * 1024 * 1024, // 100MB\n  MIN_PART_SIZE: 5 * 1024 * 1024, // 5MB\n  MAX_PART_SIZE: 5 * 1024 * 1024 * 1024, // 5GB\n  MAX_PARTS_COUNT: 10000,\n\n  // Progress reporting\n  PROGRESS_REPORT_INTERVAL: 1000, // 1 second\n};\n\n// Error Codes\nexport const B2_ERROR_CODES = {\n  BAD_AUTH_TOKEN: 'bad_auth_token',\n  EXPIRED_AUTH_TOKEN: 'expired_auth_token',\n  UNSUPPORTED_OPERATION: 'unsupported_operation',\n  INVALID_BUCKET_ID: 'invalid_bucket_id',\n  INVALID_BUCKET_NAME: 'invalid_bucket_name',\n  BUCKET_NOT_EMPTY: 'bucket_not_empty',\n  DUPLICATE_BUCKET_NAME: 'duplicate_bucket_name',\n  FILE_NOT_PRESENT: 'file_not_present',\n  NOT_ALLOWED: 'not_allowed',\n  REQUEST_TIMEOUT: 'request_timeout',\n  TOO_MANY_REQUESTS: 'too_many_requests',\n};\n\n// Retryable Error Codes\nexport const RETRYABLE_ERROR_CODES = new Set([\n  B2_ERROR_CODES.REQUEST_TIMEOUT,\n  B2_ERROR_CODES.TOO_MANY_REQUESTS,\n]);\n\n// Retryable HTTP Status Codes\nexport const RETRYABLE_STATUS_CODES = new Set([\n  HTTP_STATUS.REQUEST_TIMEOUT,\n  HTTP_STATUS.TOO_MANY_REQUESTS,\n  HTTP_STATUS.INTERNAL_SERVER_ERROR,\n  HTTP_STATUS.BAD_GATEWAY,\n  HTTP_STATUS.SERVICE_UNAVAILABLE,\n  HTTP_STATUS.GATEWAY_TIMEOUT,\n]);\n\n// Content Types\nexport const CONTENT_TYPES = {\n  JSON: 'application/json',\n  OCTET_STREAM: 'application/octet-stream',\n  TEXT_PLAIN: 'text/plain',\n};\n\n// Headers\nexport const HEADERS = {\n  AUTHORIZATION: 'Authorization',\n  CONTENT_TYPE: 'Content-Type',\n  CONTENT_LENGTH: 'Content-Length',\n  CONTENT_SHA1: 'X-Bz-Content-Sha1',\n  FILE_NAME: 'X-Bz-File-Name',\n  FILE_ID: 'X-Bz-File-Id',\n  PART_NUMBER: 'X-Bz-Part-Number',\n  TEST_MODE: 'X-Bz-Test-Mode',\n};\n","/**\n * Progress Handler for tracking upload and download progress\n * Provides progress callbacks for file operations using fetch streams\n */\n\nexport class ProgressHandler {\n  constructor(options = {}) {\n    this.options = options;\n  }\n\n  /**\n   * Create a progress event object\n   * @param {number} loaded - Number of bytes loaded\n   * @param {number} total - Total number of bytes\n   * @param {boolean} lengthComputable - Whether the total length is known\n   * @returns {Object} Progress event object\n   */\n  createProgressEvent(loaded, total, lengthComputable = true) {\n    return {\n      loaded,\n      total,\n      lengthComputable,\n      progress: lengthComputable && total > 0 ? loaded / total : 0,\n      percentage:\n        lengthComputable && total > 0 ? Math.round((loaded / total) * 100) : 0,\n    };\n  }\n\n  /**\n   * Create an upload progress tracker for fetch requests\n   * @param {Function} onProgress - Progress callback function\n   * @param {number} totalSize - Total size of the upload\n   * @returns {Function} Progress tracker function\n   */\n  createUploadProgressTracker(onProgress, totalSize) {\n    if (typeof onProgress !== 'function') {\n      return null;\n    }\n\n    let loaded = 0;\n\n    return (chunk) => {\n      if (chunk) {\n        loaded += chunk.length || chunk.byteLength || 0;\n      }\n\n      const progressEvent = this.createProgressEvent(\n        loaded,\n        totalSize,\n        totalSize > 0\n      );\n      onProgress(progressEvent);\n    };\n  }\n\n  /**\n   * Create a download progress tracker for fetch responses\n   * @param {Function} onProgress - Progress callback function\n   * @param {number} totalSize - Total size of the download (from Content-Length header)\n   * @returns {Function} Progress tracker function\n   */\n  createDownloadProgressTracker(onProgress, totalSize) {\n    if (typeof onProgress !== 'function') {\n      return null;\n    }\n\n    let loaded = 0;\n\n    return (chunk) => {\n      if (chunk) {\n        loaded += chunk.length || chunk.byteLength || 0;\n      }\n\n      const progressEvent = this.createProgressEvent(\n        loaded,\n        totalSize,\n        totalSize > 0\n      );\n      onProgress(progressEvent);\n    };\n  }\n\n  /**\n   * Wrap request body with progress tracking for uploads\n   * @param {any} body - Request body (Buffer, Uint8Array, string, etc.)\n   * @param {Function} progressTracker - Progress tracker function\n   * @returns {ReadableStream} Wrapped body with progress tracking\n   */\n  wrapUploadBody(body, progressTracker) {\n    if (!progressTracker || !body) {\n      return body;\n    }\n\n    // Convert body to Uint8Array if it's a string\n    let bodyData;\n    if (typeof body === 'string') {\n      bodyData = new TextEncoder().encode(body);\n    } else if (body instanceof ArrayBuffer) {\n      bodyData = new Uint8Array(body);\n    } else if (body instanceof Uint8Array || body instanceof Buffer) {\n      bodyData = body;\n    } else {\n      // For other types (FormData, Blob, etc.), return as-is\n      // Progress tracking for these types is handled differently\n      return body;\n    }\n\n    // Create a ReadableStream that tracks progress\n    return new ReadableStream({\n      start(controller) {\n        const chunkSize = 64 * 1024; // 64KB chunks\n        let offset = 0;\n\n        const pump = () => {\n          if (offset >= bodyData.length) {\n            controller.close();\n            return;\n          }\n\n          const chunk = bodyData.slice(offset, offset + chunkSize);\n          controller.enqueue(chunk);\n\n          // Track progress\n          progressTracker(chunk);\n\n          offset += chunk.length;\n\n          // Use setTimeout to avoid blocking the main thread\n          setTimeout(pump, 0);\n        };\n\n        pump();\n      },\n    });\n  }\n\n  /**\n   * Wrap response stream with progress tracking for downloads\n   * @param {Response} response - Fetch response object\n   * @param {Function} progressTracker - Progress tracker function\n   * @returns {ReadableStream} Wrapped response stream with progress tracking\n   */\n  wrapDownloadResponse(response, progressTracker) {\n    if (!progressTracker || !response.body) {\n      return response.body;\n    }\n\n    const reader = response.body.getReader();\n\n    return new ReadableStream({\n      start(controller) {\n        const pump = () => {\n          return reader\n            .read()\n            .then(({ done, value }) => {\n              if (done) {\n                controller.close();\n                return;\n              }\n\n              // Track progress\n              progressTracker(value);\n\n              controller.enqueue(value);\n              return pump();\n            })\n            .catch((error) => {\n              controller.error(error);\n            });\n        };\n\n        return pump();\n      },\n    });\n  }\n\n  /**\n   * Process response with progress tracking and return appropriate data type\n   * @param {Response} response - Fetch response object\n   * @param {string} responseType - Desired response type\n   * @param {Function} onDownloadProgress - Progress callback function\n   * @returns {Promise<any>} Processed response data\n   */\n  async processResponseWithProgress(\n    response,\n    responseType,\n    onDownloadProgress\n  ) {\n    if (!onDownloadProgress || !response.body) {\n      // No progress tracking needed, use standard processing\n      return this.processResponseWithoutProgress(response, responseType);\n    }\n\n    // Get content length for progress calculation\n    const contentLength = parseInt(\n      response.headers.get('content-length') || '0',\n      10\n    );\n    const progressTracker = this.createDownloadProgressTracker(\n      onDownloadProgress,\n      contentLength\n    );\n\n    // Wrap the response stream with progress tracking\n    const progressStream = this.wrapDownloadResponse(response, progressTracker);\n\n    // Create a new response with the wrapped stream\n    const progressResponse = new Response(progressStream, {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n    });\n\n    // Process the response based on the requested type\n    return this.processResponseWithoutProgress(progressResponse, responseType);\n  }\n\n  /**\n   * Process response without progress tracking (fallback method)\n   * @param {Response} response - Fetch response object\n   * @param {string} responseType - Desired response type\n   * @returns {Promise<any>} Processed response data\n   */\n  async processResponseWithoutProgress(response, responseType) {\n    switch (responseType) {\n      case 'stream':\n        return response.body;\n      case 'blob':\n        return await response.blob();\n      case 'arraybuffer':\n        return await response.arrayBuffer();\n      case 'text':\n        return await response.text();\n      case 'json':\n        return await response.json();\n      default:\n        // Auto-detect based on content type\n        const contentType = response.headers.get('content-type') || '';\n        if (contentType.includes('application/json')) {\n          try {\n            return await response.json();\n          } catch (error) {\n            return await response.text();\n          }\n        }\n        if (contentType.includes('text/')) {\n          return await response.text();\n        }\n        return await response.arrayBuffer();\n    }\n  }\n\n  /**\n   * Calculate upload body size for progress tracking\n   * @param {any} body - Request body\n   * @returns {number} Size in bytes\n   */\n  calculateBodySize(body) {\n    if (!body) {\n      return 0;\n    }\n\n    if (typeof body === 'string') {\n      return new TextEncoder().encode(body).length;\n    }\n\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    if (body instanceof Uint8Array || body instanceof Buffer) {\n      return body.length;\n    }\n\n    if (body instanceof Blob) {\n      return body.size;\n    }\n\n    if (body instanceof FormData) {\n      // FormData size is difficult to calculate precisely\n      // Return 0 to indicate unknown size\n      return 0;\n    }\n\n    // For other types, try to get length property\n    return body.length || body.size || 0;\n  }\n\n  /**\n   * Validate progress callback function\n   * @param {Function} callback - Progress callback to validate\n   * @throws {Error} If callback is not a valid function\n   */\n  validateProgressCallback(callback) {\n    if (callback !== undefined && typeof callback !== 'function') {\n      throw new Error('Progress callback must be a function');\n    }\n  }\n\n  /**\n   * Create a throttled progress callback to limit update frequency\n   * @param {Function} callback - Original progress callback\n   * @param {number} throttleMs - Throttle interval in milliseconds (default: 100ms)\n   * @returns {Function} Throttled progress callback\n   */\n  createThrottledProgressCallback(callback, throttleMs = 100) {\n    if (!callback || typeof callback !== 'function') {\n      return null;\n    }\n\n    let lastCallTime = 0;\n    let lastProgressEvent = null;\n\n    return (progressEvent) => {\n      const now = Date.now();\n\n      // Always call on first event or completion (100% progress)\n      if (\n        lastCallTime === 0 ||\n        progressEvent.progress >= 1 ||\n        now - lastCallTime >= throttleMs\n      ) {\n        lastCallTime = now;\n        lastProgressEvent = progressEvent;\n        callback(progressEvent);\n      } else {\n        // Store the latest event for potential final call\n        lastProgressEvent = progressEvent;\n      }\n    };\n  }\n}\n\nexport default ProgressHandler;\n","/**\n * HTTP Client using native fetch API\n * Provides axios-like interface for making HTTP requests\n */\n\nimport { HTTP_STATUS, DEFAULT_CONFIG, CONTENT_TYPES } from '../constants.js';\nimport { ProgressHandler } from './progress-handler.js';\n\nexport class HttpClient {\n  constructor(options = {}) {\n    this.timeout = options.timeout || DEFAULT_CONFIG.REQUEST_TIMEOUT;\n    this.baseURL = options.baseURL || '';\n    this.defaultHeaders = options.headers || {};\n    this.progressHandler = new ProgressHandler(options.progress || {});\n    \n    // Performance monitoring\n    this.performanceMetrics = {\n      enabled: options.enablePerformanceMetrics || false,\n      requestCount: 0,\n      totalRequestTime: 0,\n      averageRequestTime: 0,\n      slowRequests: [], // Track requests > 5 seconds\n      errorCount: 0\n    };\n  }\n\n  /**\n   * Start performance timing for a request\n   * @param {string} method - HTTP method\n   * @param {string} url - Request URL\n   * @returns {Object} Performance timer object\n   */\n  startPerformanceTimer(method, url) {\n    if (!this.performanceMetrics.enabled) {\n      return null;\n    }\n\n    return {\n      method,\n      url,\n      startTime: performance.now(),\n      startMemory: process.memoryUsage?.() || null\n    };\n  }\n\n  /**\n   * End performance timing and record metrics\n   * @param {Object} timer - Performance timer object\n   * @param {boolean} isError - Whether the request resulted in an error\n   */\n  endPerformanceTimer(timer, isError = false) {\n    if (!timer || !this.performanceMetrics.enabled) {\n      return;\n    }\n\n    const endTime = performance.now();\n    const duration = endTime - timer.startTime;\n    const endMemory = process.memoryUsage?.() || null;\n\n    // Update metrics\n    this.performanceMetrics.requestCount++;\n    this.performanceMetrics.totalRequestTime += duration;\n    this.performanceMetrics.averageRequestTime = \n      this.performanceMetrics.totalRequestTime / this.performanceMetrics.requestCount;\n\n    if (isError) {\n      this.performanceMetrics.errorCount++;\n    }\n\n    // Track slow requests (> 5 seconds)\n    if (duration > 5000) {\n      this.performanceMetrics.slowRequests.push({\n        method: timer.method,\n        url: timer.url,\n        duration,\n        timestamp: new Date().toISOString(),\n        memoryDelta: endMemory && timer.startMemory ? \n          endMemory.heapUsed - timer.startMemory.heapUsed : null\n      });\n\n      // Keep only last 10 slow requests\n      if (this.performanceMetrics.slowRequests.length > 10) {\n        this.performanceMetrics.slowRequests.shift();\n      }\n    }\n  }\n\n  /**\n   * Get performance metrics\n   * @returns {Object} Current performance metrics\n   */\n  getPerformanceMetrics() {\n    return { ...this.performanceMetrics };\n  }\n\n  /**\n   * Reset performance metrics\n   */\n  resetPerformanceMetrics() {\n    this.performanceMetrics = {\n      ...this.performanceMetrics,\n      requestCount: 0,\n      totalRequestTime: 0,\n      averageRequestTime: 0,\n      slowRequests: [],\n      errorCount: 0\n    };\n  }\n\n  /**\n   * Create an AbortController with timeout\n   * @param {number} timeout - Timeout in milliseconds\n   * @returns {AbortController}\n   */\n  createAbortController(timeout) {\n    const controller = new AbortController();\n\n    if (timeout > 0) {\n      setTimeout(() => {\n        controller.abort();\n      }, timeout);\n    }\n\n    return controller;\n  }\n\n  /**\n   * Transform fetch response to axios-like response format\n   * @param {Response} response - Fetch response object\n   * @param {any} data - Response data\n   * @returns {Object} Axios-like response object\n   */\n  transformResponse(response, data) {\n    return {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n      data: data,\n      config: {\n        url: response.url,\n        method: response.method || 'GET',\n      },\n    };\n  }\n\n  /**\n   * Check if response should be streamed based on content length\n   * @param {Response} response - Fetch response object\n   * @param {string} responseType - Expected response type\n   * @returns {boolean} Whether to use streaming\n   */\n  shouldUseStreaming(response, responseType) {\n    const contentLength = response.headers.get('content-length');\n    const LARGE_FILE_THRESHOLD = 50 * 1024 * 1024; // 50MB\n    \n    // Use streaming for large files or when explicitly requested\n    return (\n      responseType === 'stream' ||\n      (contentLength && parseInt(contentLength) > LARGE_FILE_THRESHOLD) ||\n      response.headers.get('content-type')?.includes('application/octet-stream')\n    );\n  }\n\n  /**\n   * Optimize memory usage for large file uploads\n   * @param {any} data - Upload data\n   * @returns {any} Optimized data\n   */\n  optimizeUploadData(data) {\n    // For large ArrayBuffers, consider using streams (threshold: 10MB)\n    if (data instanceof ArrayBuffer && data.byteLength > 10 * 1024 * 1024) {\n      // Convert to ReadableStream for memory efficiency\n      return new ReadableStream({\n        start(controller) {\n          const chunk = new Uint8Array(data);\n          const chunkSize = 64 * 1024; // 64KB chunks\n          let offset = 0;\n          \n          const pump = () => {\n            if (offset < chunk.length) {\n              const end = Math.min(offset + chunkSize, chunk.length);\n              controller.enqueue(chunk.slice(offset, end));\n              offset = end;\n              // Use setTimeout to avoid blocking the event loop\n              setTimeout(pump, 0);\n            } else {\n              controller.close();\n            }\n          };\n          \n          pump();\n        }\n      });\n    }\n    \n    return data;\n  }\n\n  /**\n   * Parse response data based on content type and requested response type\n   * @param {Response} response - Fetch response object\n   * @param {string} responseType - Requested response type\n   * @returns {Promise<any>} Parsed response data\n   */\n  async parseResponseData(response, responseType = 'auto') {\n    // Use ProgressHandler for consistent response processing\n    return await this.progressHandler.processResponseWithoutProgress(\n      response,\n      responseType\n    );\n  }\n\n  /**\n   * Create error from fetch response\n   * @param {Response} response - Fetch response object\n   * @param {any} data - Response data\n   * @returns {Error} HTTP error\n   */\n  async createHttpError(response, data) {\n    const error = new Error(`HTTP ${response.status}: ${response.statusText}`);\n    error.status = response.status;\n    error.statusText = response.statusText;\n    error.response = this.transformResponse(response, data);\n    error.isHttpError = true;\n\n    // Add B2-specific error information if available\n    if (data && typeof data === 'object') {\n      if (data.code) {\n        error.code = data.code;\n      }\n      if (data.message) {\n        error.message = data.message;\n      }\n    }\n\n    return error;\n  }\n\n  /**\n   * Make HTTP request using fetch\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  async request(options = {}) {\n    const {\n      method = 'GET',\n      url,\n      data,\n      headers = {},\n      timeout = this.timeout,\n      responseType = 'auto',\n      onUploadProgress,\n      onDownloadProgress,\n    } = options;\n\n    // Start performance monitoring\n    const perfTimer = this.startPerformanceTimer(method, url);\n\n    // Validate progress callbacks\n    this.progressHandler.validateProgressCallback(onUploadProgress);\n    this.progressHandler.validateProgressCallback(onDownloadProgress);\n\n    // Construct full URL\n    const fullUrl = url.startsWith('http') ? url : `${this.baseURL}${url}`;\n\n    // Prepare headers\n    const requestHeaders = {\n      ...this.defaultHeaders,\n      ...headers,\n    };\n\n    // Prepare request body with progress tracking and memory optimization\n    let body = null;\n    if (data !== undefined && method !== 'GET' && method !== 'HEAD') {\n      if (\n        data instanceof FormData ||\n        data instanceof ArrayBuffer ||\n        data instanceof Blob\n      ) {\n        // Optimize large uploads for memory efficiency\n        body = this.optimizeUploadData(data);\n      } else if (typeof data === 'object') {\n        body = JSON.stringify(data);\n        if (!requestHeaders['Content-Type']) {\n          requestHeaders['Content-Type'] = CONTENT_TYPES.JSON;\n        }\n      } else {\n        body = data;\n      }\n\n      // Wrap body with upload progress tracking if callback provided\n      if (onUploadProgress && body) {\n        const bodySize = this.progressHandler.calculateBodySize(body);\n        const uploadTracker = this.progressHandler.createUploadProgressTracker(\n          onUploadProgress,\n          bodySize\n        );\n        if (uploadTracker) {\n          body = this.progressHandler.wrapUploadBody(body, uploadTracker);\n        }\n      }\n    }\n\n    // Create abort controller for timeout\n    const controller = this.createAbortController(timeout);\n\n    // Prepare fetch options\n    const fetchOptions = {\n      method: method.toUpperCase(),\n      headers: requestHeaders,\n      body,\n      signal: controller.signal,\n    };\n\n    try {\n      // Make the request\n      const response = await fetch(fullUrl, fetchOptions);\n\n      // Check if response is successful before processing\n      if (!response.ok) {\n        // For error responses, parse without progress tracking\n        const responseData = await this.parseResponseData(\n          response,\n          responseType\n        );\n        const error = await this.createHttpError(response, responseData);\n        throw error;\n      }\n\n      // Parse response data with progress tracking for downloads\n      const responseData =\n        await this.progressHandler.processResponseWithProgress(\n          response,\n          responseType,\n          onDownloadProgress\n        );\n\n      // End performance monitoring (success)\n      this.endPerformanceTimer(perfTimer, false);\n\n      // Return axios-like response\n      return this.transformResponse(response, responseData);\n    } catch (error) {\n      // End performance monitoring (error)\n      this.endPerformanceTimer(perfTimer, true);\n\n      // Handle fetch errors (network errors, timeouts, etc.)\n      if (error.name === 'AbortError') {\n        const timeoutError = new Error(`Request timeout after ${timeout}ms`);\n        timeoutError.code = 'TIMEOUT';\n        timeoutError.isNetworkError = true;\n        throw timeoutError;\n      }\n\n      if (error.isHttpError) {\n        // Re-throw HTTP errors as-is\n        throw error;\n      }\n\n      // Handle network errors\n      const networkError = new Error(`Network error: ${error.message}`);\n      networkError.code = 'NETWORK_ERROR';\n      networkError.isNetworkError = true;\n      networkError.originalError = error;\n      throw networkError;\n    }\n  }\n\n  /**\n   * Make GET request\n   * @param {string} url - Request URL\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  async get(url, options = {}) {\n    return this.request({\n      method: 'GET',\n      url,\n      ...options,\n    });\n  }\n\n  /**\n   * Make POST request\n   * @param {string} url - Request URL\n   * @param {any} data - Request data\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  async post(url, data, options = {}) {\n    return this.request({\n      method: 'POST',\n      url,\n      data,\n      ...options,\n    });\n  }\n\n  /**\n   * Make PUT request\n   * @param {string} url - Request URL\n   * @param {any} data - Request data\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  async put(url, data, options = {}) {\n    return this.request({\n      method: 'PUT',\n      url,\n      data,\n      ...options,\n    });\n  }\n\n  /**\n   * Make DELETE request\n   * @param {string} url - Request URL\n   * @param {Object} options - Request options\n   * @returns {Promise<Object>} Response object\n   */\n  async delete(url, options = {}) {\n    return this.request({\n      method: 'DELETE',\n      url,\n      ...options,\n    });\n  }\n}\n\nexport default HttpClient;","/**\n * Retry Handler with exponential backoff\n * Provides configurable retry logic for HTTP requests\n */\n\nimport {\n  DEFAULT_CONFIG,\n  RETRYABLE_STATUS_CODES,\n  RETRYABLE_ERROR_CODES,\n  HTTP_STATUS,\n} from '../constants.js';\n\nexport class RetryHandler {\n  constructor(options = {}) {\n    this.retries = options.retries ?? DEFAULT_CONFIG.RETRY_ATTEMPTS;\n    this.retryDelay = options.retryDelay ?? DEFAULT_CONFIG.RETRY_DELAY;\n    this.retryDelayMultiplier =\n      options.retryDelayMultiplier ?? DEFAULT_CONFIG.RETRY_DELAY_MULTIPLIER;\n    this.maxRetryDelay =\n      options.maxRetryDelay ?? DEFAULT_CONFIG.MAX_RETRY_DELAY;\n    this.retryCondition =\n      options.retryCondition || this.defaultRetryCondition.bind(this);\n    this.onRetry = options.onRetry || null;\n  }\n\n  /**\n   * Default retry condition - determines if an error should trigger a retry\n   * @param {Error} error - The error that occurred\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {boolean} Whether to retry the request\n   */\n  defaultRetryCondition(error, attempt) {\n    // Don't retry if we've exceeded max attempts\n    if (attempt >= this.retries) {\n      return false;\n    }\n\n    // Retry network errors (connection failures, timeouts)\n    if (error.isNetworkError) {\n      return true;\n    }\n\n    // Retry specific HTTP status codes\n    if (error.status && RETRYABLE_STATUS_CODES.has(error.status)) {\n      return true;\n    }\n\n    // Retry specific B2 error codes\n    if (error.code && RETRYABLE_ERROR_CODES.has(error.code)) {\n      return true;\n    }\n\n    // Don't retry client errors (4xx except 429)\n    if (\n      error.status >= 400 &&\n      error.status < 500 &&\n      error.status !== HTTP_STATUS.TOO_MANY_REQUESTS\n    ) {\n      return false;\n    }\n\n    // Retry server errors (5xx)\n    if (error.status >= 500) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate delay for next retry attempt with exponential backoff and jitter\n   * @param {number} attempt - Current attempt number (0-based)\n   * @returns {number} Delay in milliseconds\n   */\n  calculateDelay(attempt) {\n    // Calculate exponential backoff: baseDelay * (multiplier ^ attempt)\n    const exponentialDelay =\n      this.retryDelay * Math.pow(this.retryDelayMultiplier, attempt);\n\n    // Apply maximum delay limit\n    const cappedDelay = Math.min(exponentialDelay, this.maxRetryDelay);\n\n    // Add jitter (±25% of the delay) to avoid thundering herd\n    const jitterRange = cappedDelay * 0.25;\n    const jitter = (Math.random() - 0.5) * 2 * jitterRange;\n\n    return Math.max(0, Math.round(cappedDelay + jitter));\n  }\n\n  /**\n   * Sleep for specified duration\n   * @param {number} ms - Milliseconds to sleep\n   * @returns {Promise<void>}\n   */\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Execute a function with retry logic\n   * @param {Function} requestFn - Function that returns a Promise\n   * @param {Object} options - Retry options\n   * @returns {Promise<any>} Result of successful request\n   */\n  async executeWithRetry(requestFn, options = {}) {\n    const maxAttempts = (options.retries ?? this.retries) + 1; // +1 for initial attempt\n    let lastError;\n\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      try {\n        // Execute the request function\n        const result = await requestFn();\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Check if we should retry this error\n        const shouldRetry = this.retryCondition(error, attempt);\n\n        // If this is the last attempt or we shouldn't retry, throw the error\n        if (attempt === maxAttempts - 1 || !shouldRetry) {\n          // Add retry information to the error\n          error.retryAttempts = attempt + 1;\n          error.isRetryExhausted = attempt === maxAttempts - 1;\n          throw error;\n        }\n\n        // Calculate delay for next attempt\n        const delay = this.calculateDelay(attempt);\n\n        // Call onRetry callback if provided\n        if (this.onRetry) {\n          this.onRetry(error, attempt + 1, delay);\n        }\n\n        // Wait before next attempt\n        if (delay > 0) {\n          await this.sleep(delay);\n        }\n      }\n    }\n\n    // This should never be reached, but just in case\n    throw lastError;\n  }\n\n  /**\n   * Create a retry wrapper for a function\n   * @param {Function} fn - Function to wrap with retry logic\n   * @param {Object} options - Retry options\n   * @returns {Function} Wrapped function with retry logic\n   */\n  wrap(fn, options = {}) {\n    return (...args) => {\n      return this.executeWithRetry(() => fn(...args), options);\n    };\n  }\n\n  /**\n   * Check if an error is retryable\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether the error is retryable\n   */\n  isRetryable(error) {\n    return this.retryCondition(error, 0);\n  }\n\n  /**\n   * Get retry configuration\n   * @returns {Object} Current retry configuration\n   */\n  getConfig() {\n    return {\n      retries: this.retries,\n      retryDelay: this.retryDelay,\n      retryDelayMultiplier: this.retryDelayMultiplier,\n      maxRetryDelay: this.maxRetryDelay,\n    };\n  }\n\n  /**\n   * Update retry configuration\n   * @param {Object} options - New retry options\n   */\n  updateConfig(options = {}) {\n    if (options.retries !== undefined) this.retries = options.retries;\n    if (options.retryDelay !== undefined) this.retryDelay = options.retryDelay;\n    if (options.retryDelayMultiplier !== undefined)\n      this.retryDelayMultiplier = options.retryDelayMultiplier;\n    if (options.maxRetryDelay !== undefined)\n      this.maxRetryDelay = options.maxRetryDelay;\n    if (options.retryCondition !== undefined)\n      this.retryCondition = options.retryCondition;\n    if (options.onRetry !== undefined) this.onRetry = options.onRetry;\n  }\n}\n\nexport default RetryHandler;\n","import { HEADERS, CONTENT_TYPES } from '../constants.js';\n\n/**\n * Utility class for constructing HTTP headers for B2 API requests\n */\nexport class HeaderBuilder {\n  constructor() {\n    this.headers = {};\n  }\n\n  /**\n   * Reset headers to empty state\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  reset() {\n    this.headers = {};\n    return this;\n  }\n\n  /**\n   * Set a header value\n   * @param {string} name - Header name\n   * @param {string} value - Header value\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setHeader(name, value) {\n    if (value !== undefined && value !== null) {\n      this.headers[name] = String(value);\n    }\n    return this;\n  }\n\n  /**\n   * Set multiple headers from an object\n   * @param {Object} headers - Object containing header key-value pairs\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setHeaders(headers) {\n    if (headers && typeof headers === 'object') {\n      Object.entries(headers).forEach(([name, value]) => {\n        this.setHeader(name, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Set Content-Type header\n   * @param {string} contentType - Content type value\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setContentType(contentType) {\n    return this.setHeader(HEADERS.CONTENT_TYPE, contentType);\n  }\n\n  /**\n   * Set Content-Length header\n   * @param {number} contentLength - Content length in bytes\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setContentLength(contentLength) {\n    return this.setHeader(HEADERS.CONTENT_LENGTH, contentLength);\n  }\n\n  /**\n   * Set Authorization header\n   * @param {string} token - Authorization token\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setAuthorization(token) {\n    return this.setHeader(HEADERS.AUTHORIZATION, token);\n  }\n\n  /**\n   * Set Basic Authorization header\n   * @param {string} applicationKeyId - Application key ID\n   * @param {string} applicationKey - Application key\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setBasicAuth(applicationKeyId, applicationKey) {\n    const credentials = btoa(`${applicationKeyId}:${applicationKey}`);\n    return this.setAuthorization(`Basic ${credentials}`);\n  }\n\n  /**\n   * Set Bearer Authorization header\n   * @param {string} token - Bearer token\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setBearerAuth(token) {\n    return this.setAuthorization(token);\n  }\n\n  /**\n   * Set file-related headers\n   * @param {Object} options - File options\n   * @param {string} options.fileName - File name\n   * @param {string} options.contentSha1 - SHA1 hash of content\n   * @param {string} options.contentType - Content type\n   * @param {number} options.contentLength - Content length\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setFileHeaders({ fileName, contentSha1, contentType, contentLength }) {\n    if (fileName) {\n      this.setHeader(HEADERS.FILE_NAME, encodeURIComponent(fileName));\n    }\n    if (contentSha1) {\n      this.setHeader(HEADERS.CONTENT_SHA1, contentSha1);\n    }\n    if (contentType) {\n      this.setContentType(contentType);\n    }\n    if (contentLength !== undefined) {\n      this.setContentLength(contentLength);\n    }\n    return this;\n  }\n\n  /**\n   * Set part number header for multipart uploads\n   * @param {number} partNumber - Part number (1-based)\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setPartNumber(partNumber) {\n    return this.setHeader(HEADERS.PART_NUMBER, partNumber);\n  }\n\n  /**\n   * Set test mode header\n   * @param {boolean} testMode - Whether to enable test mode\n   * @returns {HeaderBuilder} This instance for chaining\n   */\n  setTestMode(testMode = true) {\n    if (testMode) {\n      this.setHeader(HEADERS.TEST_MODE, 'fail_some_uploads');\n    }\n    return this;\n  }\n\n  /**\n   * Get the built headers object\n   * @returns {Object} Headers object\n   */\n  build() {\n    return { ...this.headers };\n  }\n}\n\n/**\n * Authentication header utilities\n */\nexport const AuthHeaders = {\n  /**\n   * Create Basic authentication header\n   * @param {string} applicationKeyId - Application key ID\n   * @param {string} applicationKey - Application key\n   * @returns {Object} Headers object with Authorization header\n   */\n  createBasicAuth(applicationKeyId, applicationKey) {\n    if (!applicationKeyId || !applicationKey) {\n      throw new Error(\n        'Application key ID and application key are required for Basic auth'\n      );\n    }\n\n    const credentials = btoa(`${applicationKeyId}:${applicationKey}`);\n    return {\n      [HEADERS.AUTHORIZATION]: `Basic ${credentials}`,\n    };\n  },\n\n  /**\n   * Create Bearer authentication header\n   * @param {string} token - Bearer token\n   * @returns {Object} Headers object with Authorization header\n   */\n  createBearerAuth(token) {\n    if (!token) {\n      throw new Error('Token is required for Bearer auth');\n    }\n\n    return {\n      [HEADERS.AUTHORIZATION]: token,\n    };\n  },\n\n  /**\n   * Extract authorization token from headers\n   * @param {Object} headers - Headers object\n   * @returns {string|null} Authorization token or null if not found\n   */\n  extractAuthToken(headers) {\n    return headers?.[HEADERS.AUTHORIZATION] || null;\n  },\n};\n\n/**\n * Info header utilities for file metadata\n */\nexport const InfoHeaders = {\n  /**\n   * Maximum number of info headers allowed by B2\n   */\n  MAX_INFO_HEADERS: 10,\n\n  /**\n   * Add info headers to existing headers object\n   * @param {Object} headers - Existing headers object\n   * @param {Object} info - Info object with metadata\n   * @returns {Object} Updated headers object\n   */\n  addInfoHeaders(headers, info) {\n    if (!info || typeof info !== 'object') {\n      return headers;\n    }\n\n    const keys = Object.keys(info);\n\n    if (keys.length > this.MAX_INFO_HEADERS) {\n      throw new Error(\n        `Too many info headers: maximum of ${this.MAX_INFO_HEADERS} allowed`\n      );\n    }\n\n    const invalidKeys = [];\n    const updatedHeaders = { ...headers };\n\n    keys.forEach((key) => {\n      if (this.isValidInfoHeaderKey(key)) {\n        const headerName = `X-Bz-Info-${key}`;\n        updatedHeaders[headerName] = encodeURIComponent(String(info[key]));\n      } else {\n        invalidKeys.push(key);\n      }\n    });\n\n    if (invalidKeys.length > 0) {\n      throw new Error(\n        `Info header keys contain invalid characters: ${invalidKeys.join(', ')}`\n      );\n    }\n\n    return updatedHeaders;\n  },\n\n  /**\n   * Validate info header key\n   * @param {string} key - Header key to validate\n   * @returns {boolean} True if valid\n   */\n  isValidInfoHeaderKey(key) {\n    return typeof key === 'string' && /^[a-zA-Z0-9\\-_]+$/.test(key);\n  },\n\n  /**\n   * Extract info headers from response headers\n   * @param {Object} headers - Response headers\n   * @returns {Object} Extracted info headers\n   */\n  extractInfoHeaders(headers) {\n    const info = {};\n\n    if (!headers || typeof headers !== 'object') {\n      return info;\n    }\n\n    Object.entries(headers).forEach(([key, value]) => {\n      if (key.toLowerCase().startsWith('x-bz-info-')) {\n        const infoKey = key.substring(10); // Remove 'x-bz-info-' prefix (10 characters)\n        try {\n          info[infoKey] = decodeURIComponent(value);\n        } catch (error) {\n          // If decoding fails, use the raw value\n          info[infoKey] = value;\n        }\n      }\n    });\n\n    return info;\n  },\n};\n\n/**\n * Common header utilities\n */\nexport const HeaderUtils = {\n  /**\n   * Create headers for JSON requests\n   * @param {string} authToken - Authorization token\n   * @returns {Object} Headers object\n   */\n  createJsonHeaders(authToken) {\n    const headers = {\n      [HEADERS.CONTENT_TYPE]: CONTENT_TYPES.JSON,\n    };\n\n    if (authToken) {\n      headers[HEADERS.AUTHORIZATION] = authToken;\n    }\n\n    return headers;\n  },\n\n  /**\n   * Create headers for file upload\n   * @param {Object} options - Upload options\n   * @param {string} options.authToken - Authorization token\n   * @param {string} options.fileName - File name\n   * @param {string} options.contentType - Content type\n   * @param {string} options.contentSha1 - SHA1 hash\n   * @param {number} options.contentLength - Content length\n   * @param {Object} options.info - File info metadata\n   * @returns {Object} Headers object\n   */\n  createUploadHeaders({\n    authToken,\n    fileName,\n    contentType,\n    contentSha1,\n    contentLength,\n    info,\n  }) {\n    let headers = {};\n\n    if (authToken) {\n      headers[HEADERS.AUTHORIZATION] = authToken;\n    }\n\n    if (fileName) {\n      headers[HEADERS.FILE_NAME] = encodeURIComponent(fileName);\n    }\n\n    if (contentType) {\n      headers[HEADERS.CONTENT_TYPE] = contentType;\n    }\n\n    if (contentSha1) {\n      headers[HEADERS.CONTENT_SHA1] = contentSha1;\n    }\n\n    if (contentLength !== undefined) {\n      headers[HEADERS.CONTENT_LENGTH] = String(contentLength);\n    }\n\n    // Add info headers if provided\n    if (info) {\n      headers = InfoHeaders.addInfoHeaders(headers, info);\n    }\n\n    return headers;\n  },\n\n  /**\n   * Create headers for part upload\n   * @param {Object} options - Part upload options\n   * @param {string} options.authToken - Authorization token\n   * @param {number} options.partNumber - Part number\n   * @param {string} options.contentSha1 - SHA1 hash of part\n   * @param {number} options.contentLength - Content length\n   * @returns {Object} Headers object\n   */\n  createPartUploadHeaders({\n    authToken,\n    partNumber,\n    contentSha1,\n    contentLength,\n  }) {\n    const headers = {};\n\n    if (authToken) {\n      headers[HEADERS.AUTHORIZATION] = authToken;\n    }\n\n    if (partNumber !== undefined) {\n      headers[HEADERS.PART_NUMBER] = String(partNumber);\n    }\n\n    if (contentSha1) {\n      headers[HEADERS.CONTENT_SHA1] = contentSha1;\n    }\n\n    if (contentLength !== undefined) {\n      headers[HEADERS.CONTENT_LENGTH] = String(contentLength);\n    }\n\n    return headers;\n  },\n\n  /**\n   * Normalize header names to lowercase\n   * @param {Object} headers - Headers object\n   * @returns {Object} Normalized headers object\n   */\n  normalizeHeaders(headers) {\n    if (!headers || typeof headers !== 'object') {\n      return {};\n    }\n\n    const normalized = {};\n    Object.entries(headers).forEach(([key, value]) => {\n      normalized[key.toLowerCase()] = value;\n    });\n\n    return normalized;\n  },\n\n  /**\n   * Convert B2 response headers to camelCase object\n   * @param {Object} headers - Response headers\n   * @returns {Object} Converted headers object\n   */\n  convertBzHeaders(headers) {\n    const result = {};\n\n    if (!headers || typeof headers !== 'object') {\n      return result;\n    }\n\n    Object.entries(headers).forEach(([key, value]) => {\n      if (key.toLowerCase().startsWith('x-bz-')) {\n        let camelKey;\n\n        if (key.toLowerCase().startsWith('x-bz-info-')) {\n          // Handle info headers specially\n          camelKey = 'info' + this.toCamelCase(key.substring(11));\n        } else {\n          // Handle other B2 headers\n          camelKey = this.toCamelCase(key.substring(5)); // Remove 'x-bz-' prefix\n        }\n\n        result[camelKey] = value;\n      }\n    });\n\n    return result;\n  },\n\n  /**\n   * Convert kebab-case to camelCase\n   * @param {string} str - String to convert\n   * @returns {string} CamelCase string\n   */\n  toCamelCase(str) {\n    return str\n      .split('-')\n      .map((word, index) => {\n        if (index === 0) {\n          return word.toLowerCase();\n        }\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n      })\n      .join('');\n  },\n};\n\n// Create a default header builder instance for convenience\nexport const headerBuilder = new HeaderBuilder();\n","import { BUCKET_TYPES, KEY_CAPABILITIES } from '../constants.js';\n\n/**\n * Input validation utilities for B2 API parameters\n */\nexport class Validator {\n  /**\n   * Validate required parameters\n   * @param {Object} params - Parameters object\n   * @param {string[]} required - Array of required parameter names\n   * @throws {Error} If any required parameter is missing\n   */\n  static validateRequired(params, required) {\n    if (!params || typeof params !== 'object') {\n      throw new Error('Parameters object is required');\n    }\n\n    const missing = required.filter(\n      (param) =>\n        params[param] === undefined ||\n        params[param] === null ||\n        params[param] === ''\n    );\n\n    if (missing.length > 0) {\n      throw new Error(`Missing required parameters: ${missing.join(', ')}`);\n    }\n  }\n\n  /**\n   * Validate string parameter\n   * @param {any} value - Value to validate\n   * @param {string} name - Parameter name for error messages\n   * @param {Object} options - Validation options\n   * @param {number} options.minLength - Minimum length\n   * @param {number} options.maxLength - Maximum length\n   * @param {RegExp} options.pattern - Pattern to match\n   * @throws {Error} If validation fails\n   */\n  static validateString(value, name, options = {}) {\n    if (typeof value !== 'string') {\n      throw new Error(`${name} must be a string`);\n    }\n\n    if (options.minLength !== undefined && value.length < options.minLength) {\n      throw new Error(\n        `${name} must be at least ${options.minLength} characters long`\n      );\n    }\n\n    if (options.maxLength !== undefined && value.length > options.maxLength) {\n      throw new Error(\n        `${name} must be no more than ${options.maxLength} characters long`\n      );\n    }\n\n    if (options.pattern && !options.pattern.test(value)) {\n      throw new Error(`${name} format is invalid`);\n    }\n  }\n\n  /**\n   * Validate number parameter\n   * @param {any} value - Value to validate\n   * @param {string} name - Parameter name for error messages\n   * @param {Object} options - Validation options\n   * @param {number} options.min - Minimum value\n   * @param {number} options.max - Maximum value\n   * @param {boolean} options.integer - Must be integer\n   * @throws {Error} If validation fails\n   */\n  static validateNumber(value, name, options = {}) {\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new Error(`${name} must be a valid number`);\n    }\n\n    if (options.integer && !Number.isInteger(value)) {\n      throw new Error(`${name} must be an integer`);\n    }\n\n    if (options.min !== undefined && value < options.min) {\n      throw new Error(`${name} must be at least ${options.min}`);\n    }\n\n    if (options.max !== undefined && value > options.max) {\n      throw new Error(`${name} must be no more than ${options.max}`);\n    }\n  }\n\n  /**\n   * Validate array parameter\n   * @param {any} value - Value to validate\n   * @param {string} name - Parameter name for error messages\n   * @param {Object} options - Validation options\n   * @param {number} options.minLength - Minimum array length\n   * @param {number} options.maxLength - Maximum array length\n   * @throws {Error} If validation fails\n   */\n  static validateArray(value, name, options = {}) {\n    if (!Array.isArray(value)) {\n      throw new Error(`${name} must be an array`);\n    }\n\n    if (options.minLength !== undefined && value.length < options.minLength) {\n      throw new Error(\n        `${name} must contain at least ${options.minLength} items`\n      );\n    }\n\n    if (options.maxLength !== undefined && value.length > options.maxLength) {\n      throw new Error(\n        `${name} must contain no more than ${options.maxLength} items`\n      );\n    }\n  }\n\n  /**\n   * Validate bucket name\n   * @param {string} bucketName - Bucket name to validate\n   * @throws {Error} If bucket name is invalid\n   */\n  static validateBucketName(bucketName) {\n    this.validateString(bucketName, 'bucketName', {\n      minLength: 6,\n      maxLength: 50,\n      pattern: /^[a-zA-Z0-9\\-]+$/,\n    });\n\n    // Additional B2-specific rules\n    if (bucketName.startsWith('-') || bucketName.endsWith('-')) {\n      throw new Error('Bucket name cannot start or end with a hyphen');\n    }\n\n    if (bucketName.includes('--')) {\n      throw new Error('Bucket name cannot contain consecutive hyphens');\n    }\n  }\n\n  /**\n   * Validate bucket type\n   * @param {string} bucketType - Bucket type to validate\n   * @throws {Error} If bucket type is invalid\n   */\n  static validateBucketType(bucketType) {\n    const validTypes = Object.values(BUCKET_TYPES);\n    if (!validTypes.includes(bucketType)) {\n      throw new Error(\n        `Invalid bucket type. Must be one of: ${validTypes.join(', ')}`\n      );\n    }\n  }\n\n  /**\n   * Validate file name\n   * @param {string} fileName - File name to validate\n   * @throws {Error} If file name is invalid\n   */\n  static validateFileName(fileName) {\n    this.validateString(fileName, 'fileName', {\n      minLength: 1,\n      maxLength: 1024,\n    });\n\n    // B2 doesn't allow certain characters in file names\n    const invalidChars = /[\\x00-\\x1f\\x7f]/;\n    if (invalidChars.test(fileName)) {\n      throw new Error('File name contains invalid control characters');\n    }\n\n    // File name cannot start with '/'\n    if (fileName.startsWith('/')) {\n      throw new Error('File name cannot start with a forward slash');\n    }\n  }\n\n  /**\n   * Validate SHA1 hash\n   * @param {string} sha1 - SHA1 hash to validate\n   * @throws {Error} If SHA1 hash is invalid\n   */\n  static validateSha1(sha1) {\n    this.validateString(sha1, 'SHA1 hash', {\n      minLength: 40,\n      maxLength: 40,\n      pattern: /^[a-fA-F0-9]{40}$/,\n    });\n  }\n\n  /**\n   * Validate content type\n   * @param {string} contentType - Content type to validate\n   * @throws {Error} If content type is invalid\n   */\n  static validateContentType(contentType) {\n    this.validateString(contentType, 'contentType', {\n      minLength: 1,\n      maxLength: 1024,\n      pattern:\n        /^[a-zA-Z0-9][a-zA-Z0-9!#$&\\-\\^_]*\\/[a-zA-Z0-9][a-zA-Z0-9!#$&\\-\\^_.]*$/,\n    });\n  }\n\n  /**\n   * Validate key capabilities\n   * @param {string[]} capabilities - Array of capabilities to validate\n   * @throws {Error} If any capability is invalid\n   */\n  static validateKeyCapabilities(capabilities) {\n    this.validateArray(capabilities, 'capabilities', { minLength: 1 });\n\n    const validCapabilities = Object.values(KEY_CAPABILITIES);\n    const invalid = capabilities.filter(\n      (cap) => !validCapabilities.includes(cap)\n    );\n\n    if (invalid.length > 0) {\n      throw new Error(`Invalid key capabilities: ${invalid.join(', ')}`);\n    }\n  }\n\n  /**\n   * Validate part number for multipart uploads\n   * @param {number} partNumber - Part number to validate\n   * @throws {Error} If part number is invalid\n   */\n  static validatePartNumber(partNumber) {\n    this.validateNumber(partNumber, 'partNumber', {\n      min: 1,\n      max: 10000,\n      integer: true,\n    });\n  }\n\n  /**\n   * Validate file size\n   * @param {number} size - File size in bytes\n   * @param {Object} options - Validation options\n   * @param {number} options.maxSize - Maximum allowed size\n   * @throws {Error} If file size is invalid\n   */\n  static validateFileSize(size, options = {}) {\n    this.validateNumber(size, 'file size', {\n      min: 0,\n      integer: true,\n    });\n\n    if (options.maxSize && size > options.maxSize) {\n      throw new Error(\n        `File size exceeds maximum allowed size of ${options.maxSize} bytes`\n      );\n    }\n  }\n\n  /**\n   * Validate pagination parameters\n   * @param {Object} params - Pagination parameters\n   * @param {number} params.maxFileCount - Maximum number of files to return\n   * @param {string} params.startFileName - File name to start listing from\n   * @throws {Error} If pagination parameters are invalid\n   */\n  static validatePagination(params) {\n    if (params.maxFileCount !== undefined) {\n      this.validateNumber(params.maxFileCount, 'maxFileCount', {\n        min: 1,\n        max: 10000,\n        integer: true,\n      });\n    }\n\n    if (params.startFileName !== undefined) {\n      this.validateFileName(params.startFileName);\n    }\n  }\n\n  /**\n   * Validate authentication credentials\n   * @param {Object} credentials - Authentication credentials\n   * @param {string} credentials.applicationKeyId - Application key ID\n   * @param {string} credentials.applicationKey - Application key\n   * @throws {Error} If credentials are invalid\n   */\n  static validateAuthCredentials(credentials) {\n    this.validateRequired(credentials, ['applicationKeyId', 'applicationKey']);\n\n    this.validateString(credentials.applicationKeyId, 'applicationKeyId', {\n      minLength: 1,\n      maxLength: 1024,\n    });\n\n    this.validateString(credentials.applicationKey, 'applicationKey', {\n      minLength: 1,\n      maxLength: 1024,\n    });\n  }\n}\n\n/**\n * URL encoding utilities\n */\nexport const UrlEncoder = {\n  /**\n   * Encode a file name for use in URLs, preserving path separators\n   * @param {string} fileName - File name to encode\n   * @returns {string} URL-encoded file name\n   */\n  encodeFileName(fileName) {\n    if (typeof fileName !== 'string') {\n      throw new Error('File name must be a string');\n    }\n\n    return fileName\n      .split('/')\n      .map((segment) => encodeURIComponent(segment))\n      .join('/');\n  },\n\n  /**\n   * Encode a single path segment\n   * @param {string} segment - Path segment to encode\n   * @returns {string} URL-encoded segment\n   */\n  encodePathSegment(segment) {\n    if (typeof segment !== 'string') {\n      throw new Error('Path segment must be a string');\n    }\n\n    return encodeURIComponent(segment);\n  },\n\n  /**\n   * Decode a URL-encoded file name\n   * @param {string} encodedFileName - Encoded file name\n   * @returns {string} Decoded file name\n   */\n  decodeFileName(encodedFileName) {\n    if (typeof encodedFileName !== 'string') {\n      throw new Error('Encoded file name must be a string');\n    }\n\n    try {\n      return encodedFileName\n        .split('/')\n        .map((segment) => decodeURIComponent(segment))\n        .join('/');\n    } catch (error) {\n      throw new Error(`Failed to decode file name: ${error.message}`);\n    }\n  },\n};\n\n/**\n * Parameter validation helpers for specific B2 operations\n */\nexport const B2Validators = {\n  /**\n   * Validate bucket creation parameters\n   * @param {Object} params - Bucket creation parameters\n   * @throws {Error} If parameters are invalid\n   */\n  validateCreateBucket(params) {\n    Validator.validateRequired(params, ['bucketName', 'bucketType']);\n    Validator.validateBucketName(params.bucketName);\n    Validator.validateBucketType(params.bucketType);\n\n    if (params.bucketInfo && typeof params.bucketInfo !== 'object') {\n      throw new Error('bucketInfo must be an object');\n    }\n\n    if (params.corsRules && !Array.isArray(params.corsRules)) {\n      throw new Error('corsRules must be an array');\n    }\n\n    if (params.lifecycleRules && !Array.isArray(params.lifecycleRules)) {\n      throw new Error('lifecycleRules must be an array');\n    }\n  },\n\n  /**\n   * Validate file upload parameters\n   * @param {Object} params - File upload parameters\n   * @throws {Error} If parameters are invalid\n   */\n  validateUploadFile(params) {\n    Validator.validateRequired(params, [\n      'uploadUrl',\n      'uploadAuthToken',\n      'fileName',\n      'data',\n    ]);\n    Validator.validateFileName(params.fileName);\n\n    if (params.contentType) {\n      Validator.validateContentType(params.contentType);\n    }\n\n    if (params.contentSha1) {\n      Validator.validateSha1(params.contentSha1);\n    }\n\n    if (params.info && typeof params.info !== 'object') {\n      throw new Error('info must be an object');\n    }\n  },\n\n  /**\n   * Validate large file start parameters\n   * @param {Object} params - Large file start parameters\n   * @throws {Error} If parameters are invalid\n   */\n  validateStartLargeFile(params) {\n    Validator.validateRequired(params, ['bucketId', 'fileName']);\n    Validator.validateFileName(params.fileName);\n\n    if (params.contentType) {\n      Validator.validateContentType(params.contentType);\n    }\n\n    if (params.info && typeof params.info !== 'object') {\n      throw new Error('info must be an object');\n    }\n  },\n\n  /**\n   * Validate part upload parameters\n   * @param {Object} params - Part upload parameters\n   * @throws {Error} If parameters are invalid\n   */\n  validateUploadPart(params) {\n    Validator.validateRequired(params, [\n      'uploadUrl',\n      'uploadAuthToken',\n      'partNumber',\n      'data',\n    ]);\n    Validator.validatePartNumber(params.partNumber);\n\n    if (params.contentSha1) {\n      Validator.validateSha1(params.contentSha1);\n    }\n  },\n\n  /**\n   * Validate key creation parameters\n   * @param {Object} params - Key creation parameters\n   * @throws {Error} If parameters are invalid\n   */\n  validateCreateKey(params) {\n    Validator.validateRequired(params, ['keyName', 'capabilities']);\n\n    Validator.validateString(params.keyName, 'keyName', {\n      minLength: 1,\n      maxLength: 100,\n    });\n\n    Validator.validateKeyCapabilities(params.capabilities);\n\n    if (params.validDurationInSeconds !== undefined) {\n      Validator.validateNumber(\n        params.validDurationInSeconds,\n        'validDurationInSeconds',\n        {\n          min: 1,\n          max: 1000 * 24 * 60 * 60, // 1000 days in seconds\n          integer: true,\n        }\n      );\n    }\n\n    if (params.bucketId) {\n      Validator.validateString(params.bucketId, 'bucketId');\n    }\n\n    if (params.namePrefix) {\n      Validator.validateString(params.namePrefix, 'namePrefix');\n    }\n  },\n};\n","/**\n * Authentication Manager for B2 API\n * Handles credential validation, authorization, and auth context management\n */\n\nimport {\n  API_ENDPOINTS,\n  B2_API_BASE_URL,\n  B2_ERROR_CODES,\n} from '../constants.js';\nimport { AuthHeaders } from '../utils/headers.js';\nimport { Validator } from '../utils/validation.js';\n\nexport class AuthManager {\n  constructor(httpClient, config = {}) {\n    this.httpClient = httpClient;\n    this.config = config;\n\n    // Auth context storage\n    this.authContext = {\n      authorizationToken: null,\n      apiUrl: null,\n      downloadUrl: null,\n      accountId: null,\n      recommendedPartSize: null,\n      absoluteMinimumPartSize: null,\n      allowed: null,\n      isAuthenticated: false,\n    };\n  }\n\n  /**\n   * Validate credentials for authentication\n   * @param {Object} credentials - Authentication credentials\n   * @param {string} credentials.applicationKeyId - Application key ID\n   * @param {string} credentials.applicationKey - Application key\n   * @throws {Error} If credentials are invalid\n   */\n  validateCredentials(credentials) {\n    if (!credentials || typeof credentials !== 'object') {\n      throw new Error('credentials is required');\n    }\n\n    if (!credentials.hasOwnProperty('applicationKeyId')) {\n      throw new Error('applicationKeyId is required');\n    }\n\n    if (!credentials.hasOwnProperty('applicationKey')) {\n      throw new Error('applicationKey is required');\n    }\n\n    if (typeof credentials.applicationKeyId !== 'string') {\n      throw new Error('applicationKeyId must be a string');\n    }\n\n    if (typeof credentials.applicationKey !== 'string') {\n      throw new Error('applicationKey must be a string');\n    }\n\n    if (credentials.applicationKeyId.trim().length === 0) {\n      throw new Error('Application key ID cannot be empty');\n    }\n\n    if (credentials.applicationKey.trim().length === 0) {\n      throw new Error('Application key cannot be empty');\n    }\n  }\n\n  /**\n   * Generate Basic authentication header\n   * @param {string} applicationKeyId - Application key ID\n   * @param {string} applicationKey - Application key\n   * @returns {Object} Headers object with Basic auth\n   */\n  generateBasicAuthHeader(applicationKeyId, applicationKey) {\n    try {\n      return AuthHeaders.createBasicAuth(applicationKeyId, applicationKey);\n    } catch (error) {\n      throw new Error(`Failed to generate Basic auth header: ${error.message}`);\n    }\n  }\n\n  /**\n   * Save authentication context from API response\n   * @param {Object} authResponse - Authentication response from B2 API\n   */\n  saveAuthContext(authResponse) {\n    if (!authResponse || typeof authResponse !== 'object') {\n      throw new Error('Invalid authentication response');\n    }\n\n    // Handle both old and new B2 API response formats\n    let apiUrl, downloadUrl, recommendedPartSize, absoluteMinimumPartSize, allowed;\n\n    // New format: nested in apiInfo.storageApi\n    if (authResponse.apiInfo && authResponse.apiInfo.storageApi) {\n      const storageApi = authResponse.apiInfo.storageApi;\n      apiUrl = storageApi.apiUrl;\n      downloadUrl = storageApi.downloadUrl;\n      recommendedPartSize = storageApi.recommendedPartSize;\n      absoluteMinimumPartSize = storageApi.absoluteMinimumPartSize; \n      allowed = storageApi.allowed;\n    }\n    // Old format: fields at root level (for backward compatibility)\n    else {\n      apiUrl = authResponse.apiUrl;\n      downloadUrl = authResponse.downloadUrl;\n      recommendedPartSize = authResponse.recommendedPartSize;\n      absoluteMinimumPartSize = authResponse.absoluteMinimumPartSize;\n      allowed = authResponse.allowed;\n    }\n\n    // Validate required fields\n    const requiredFields = [\n      { name: 'authorizationToken', value: authResponse.authorizationToken },\n      { name: 'apiUrl', value: apiUrl },\n      { name: 'downloadUrl', value: downloadUrl },\n      { name: 'accountId', value: authResponse.accountId },\n    ];\n\n    for (const field of requiredFields) {\n      if (!field.value) {\n        throw new Error(`Missing required field in auth response: ${field.name}`);\n      }\n    }\n\n    this.authContext = {\n      authorizationToken: authResponse.authorizationToken,\n      apiUrl: apiUrl,\n      downloadUrl: downloadUrl,\n      accountId: authResponse.accountId,\n      recommendedPartSize: recommendedPartSize || null,\n      absoluteMinimumPartSize: absoluteMinimumPartSize || null,\n      allowed: allowed || null,\n      isAuthenticated: true,\n    };\n  }\n\n  /**\n   * Get current authentication context\n   * @returns {Object} Current auth context\n   */\n  getAuthContext() {\n    return { ...this.authContext };\n  }\n\n  /**\n   * Check if currently authenticated\n   * @returns {boolean} True if authenticated\n   */\n  isAuthenticated() {\n    return (\n      this.authContext.isAuthenticated && !!this.authContext.authorizationToken\n    );\n  }\n\n  /**\n   * Get authorization token for authenticated requests\n   * @returns {string|null} Authorization token or null if not authenticated\n   */\n  getAuthToken() {\n    return this.authContext.authorizationToken;\n  }\n\n  /**\n   * Get API URL for making authenticated requests\n   * @returns {string|null} API URL or null if not authenticated\n   */\n  getApiUrl() {\n    return this.authContext.apiUrl;\n  }\n\n  /**\n   * Get download URL for file downloads\n   * @returns {string|null} Download URL or null if not authenticated\n   */\n  getDownloadUrl() {\n    return this.authContext.downloadUrl;\n  }\n\n  /**\n   * Get account ID\n   * @returns {string|null} Account ID or null if not authenticated\n   */\n  getAccountId() {\n    return this.authContext.accountId;\n  }\n\n  /**\n   * Get recommended part size for large file uploads\n   * @returns {number|null} Recommended part size or null if not available\n   */\n  getRecommendedPartSize() {\n    return this.authContext.recommendedPartSize;\n  }\n\n  /**\n   * Clear authentication context\n   */\n  clearAuthContext() {\n    this.authContext = {\n      authorizationToken: null,\n      apiUrl: null,\n      downloadUrl: null,\n      accountId: null,\n      recommendedPartSize: null,\n      absoluteMinimumPartSize: null,\n      allowed: null,\n      isAuthenticated: false,\n    };\n  }\n\n  /**\n   * Authorize with B2 API using application credentials\n   * @param {Object} credentials - Authentication credentials\n   * @param {string} credentials.applicationKeyId - Application key ID\n   * @param {string} credentials.applicationKey - Application key\n   * @param {Object} options - Additional options\n   * @returns {Promise<Object>} Authentication response\n   */\n  async authorize(credentials, options = {}) {\n    // Validate credentials\n    this.validateCredentials(credentials);\n\n    // Generate Basic auth header\n    const authHeaders = this.generateBasicAuthHeader(\n      credentials.applicationKeyId,\n      credentials.applicationKey\n    );\n\n    try {\n      // Make authorization request\n      const response = await this.httpClient.get(\n        `${B2_API_BASE_URL}${API_ENDPOINTS.AUTHORIZE_ACCOUNT}`,\n        {\n          headers: authHeaders,\n          timeout: options.timeout,\n        }\n      );\n\n      // Save auth context from response\n      this.saveAuthContext(response.data);\n\n      return response;\n    } catch (error) {\n      // Clear any existing auth context on failure\n      this.clearAuthContext();\n\n      // Handle specific B2 authentication errors\n      if (error.status === 401) {\n        const b2Error = new Error(\n          'Authentication failed: Invalid application key ID or application key'\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        b2Error.isAuthError = true;\n        // Preserve original response for compatibility\n        b2Error.response = error.response;\n        throw b2Error;\n      }\n\n      // Re-throw other errors\n      throw error;\n    }\n  }\n\n  /**\n   * Get headers for authenticated requests\n   * @returns {Object} Headers object with authorization token\n   * @throws {Error} If not authenticated\n   */\n  getAuthHeaders() {\n    if (!this.isAuthenticated()) {\n      throw new Error('Not authenticated. Call authorize() first.');\n    }\n\n    return AuthHeaders.createBearerAuth(this.authContext.authorizationToken);\n  }\n\n  /**\n   * Refresh authentication if token is expired\n   * @param {Object} credentials - Original credentials for re-authentication\n   * @param {Object} options - Additional options\n   * @returns {Promise<Object>} New authentication response\n   */\n  async refreshAuth(credentials, options = {}) {\n    // Clear current context and re-authenticate\n    this.clearAuthContext();\n    return this.authorize(credentials, options);\n  }\n\n  /**\n   * Check if an error indicates expired authentication\n   * @param {Error} error - Error to check\n   * @returns {boolean} True if error indicates expired auth\n   */\n  isAuthExpiredError(error) {\n    return (\n      error.status === 401 ||\n      error.code === B2_ERROR_CODES.BAD_AUTH_TOKEN ||\n      error.code === B2_ERROR_CODES.EXPIRED_AUTH_TOKEN\n    );\n  }\n}\n\nexport default AuthManager;\n","import { B2_API_BASE_URL, API_ENDPOINTS } from '../constants.js';\n\n/**\n * Utility class for constructing B2 API endpoint URLs\n */\nexport class EndpointBuilder {\n  constructor(authContext = null) {\n    this.authContext = authContext;\n  }\n\n  /**\n   * Update the auth context for dynamic URL construction\n   * @param {Object} authContext - Authentication context containing apiUrl and downloadUrl\n   */\n  setAuthContext(authContext) {\n    this.authContext = authContext;\n  }\n\n  /**\n   * Get the base API URL (either from auth context or default)\n   * @returns {string} Base API URL\n   */\n  getApiUrl() {\n    return this.authContext?.apiUrl || B2_API_BASE_URL;\n  }\n\n  /**\n   * Get the download URL from auth context\n   * @returns {string} Download URL\n   */\n  getDownloadUrl() {\n    if (!this.authContext?.downloadUrl) {\n      throw new Error('Download URL not available. Please authenticate first.');\n    }\n    return this.authContext.downloadUrl;\n  }\n\n  /**\n   * Build a complete API endpoint URL\n   * @param {string} endpoint - The endpoint path from API_ENDPOINTS\n   * @param {Object} params - Optional query parameters\n   * @returns {string} Complete URL\n   */\n  buildApiUrl(endpoint, params = {}) {\n    const baseUrl = this.getApiUrl();\n    const url = new URL(endpoint, baseUrl);\n\n    // Add query parameters\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        url.searchParams.append(key, String(value));\n      }\n    });\n\n    return url.toString();\n  }\n\n  /**\n   * Build a download URL\n   * @param {string} endpoint - The download endpoint path\n   * @param {Object} params - Optional query parameters\n   * @returns {string} Complete download URL\n   */\n  buildDownloadUrl(endpoint, params = {}) {\n    const baseUrl = this.getDownloadUrl();\n    const url = new URL(endpoint, baseUrl);\n\n    // Add query parameters\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        url.searchParams.append(key, String(value));\n      }\n    });\n\n    return url.toString();\n  }\n\n  // Authentication endpoints\n  getAuthorizeAccountUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.AUTHORIZE_ACCOUNT);\n  }\n\n  // Bucket endpoints\n  getCreateBucketUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.CREATE_BUCKET);\n  }\n\n  getDeleteBucketUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.DELETE_BUCKET);\n  }\n\n  getListBucketsUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.LIST_BUCKETS);\n  }\n\n  getUpdateBucketUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.UPDATE_BUCKET);\n  }\n\n  getUploadUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.GET_UPLOAD_URL);\n  }\n\n  // File endpoints\n  getListFileNamesUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.LIST_FILE_NAMES);\n  }\n\n  getListFileVersionsUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.LIST_FILE_VERSIONS);\n  }\n\n  getFileInfoUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.GET_FILE_INFO);\n  }\n\n  getDeleteFileVersionUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.DELETE_FILE_VERSION);\n  }\n\n  getHideFileUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.HIDE_FILE);\n  }\n\n  /**\n   * Get download file by name URL\n   * @param {string} bucketName - The bucket name\n   * @param {string} fileName - The file name (will be URL encoded)\n   * @returns {string} Download URL\n   */\n  getDownloadFileByNameUrl(bucketName, fileName) {\n    const encodedFileName = encodeURIComponent(fileName);\n    const endpoint = `${API_ENDPOINTS.DOWNLOAD_FILE_BY_NAME}/${encodeURIComponent(bucketName)}/${encodedFileName}`;\n    return this.buildDownloadUrl(endpoint);\n  }\n\n  /**\n   * Get download file by ID URL\n   * @param {string} fileId - The file ID\n   * @returns {string} Download URL\n   */\n  getDownloadFileByIdUrl(fileId) {\n    return this.buildDownloadUrl(API_ENDPOINTS.DOWNLOAD_FILE_BY_ID, { fileId });\n  }\n\n  // Large file endpoints\n  getStartLargeFileUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.START_LARGE_FILE);\n  }\n\n  getUploadPartUrlEndpoint() {\n    return this.buildApiUrl(API_ENDPOINTS.GET_UPLOAD_PART_URL);\n  }\n\n  getFinishLargeFileUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.FINISH_LARGE_FILE);\n  }\n\n  getCancelLargeFileUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.CANCEL_LARGE_FILE);\n  }\n\n  getListPartsUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.LIST_PARTS);\n  }\n\n  getListUnfinishedLargeFilesUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.LIST_UNFINISHED_LARGE_FILES);\n  }\n\n  // Key management endpoints\n  getCreateKeyUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.CREATE_KEY);\n  }\n\n  getDeleteKeyUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.DELETE_KEY);\n  }\n\n  getListKeysUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.LIST_KEYS);\n  }\n\n  // Download authorization\n  getDownloadAuthorizationUrl() {\n    return this.buildApiUrl(API_ENDPOINTS.GET_DOWNLOAD_AUTHORIZATION);\n  }\n}\n\n/**\n * URL encoding utilities for file names and parameters\n */\nexport const UrlUtils = {\n  /**\n   * Encode a file name for use in URLs\n   * @param {string} fileName - The file name to encode\n   * @returns {string} URL-encoded file name\n   */\n  encodeFileName(fileName) {\n    if (typeof fileName !== 'string') {\n      throw new Error('File name must be a string');\n    }\n    return encodeURIComponent(fileName);\n  },\n\n  /**\n   * Encode a bucket name for use in URLs\n   * @param {string} bucketName - The bucket name to encode\n   * @returns {string} URL-encoded bucket name\n   */\n  encodeBucketName(bucketName) {\n    if (typeof bucketName !== 'string') {\n      throw new Error('Bucket name must be a string');\n    }\n    return encodeURIComponent(bucketName);\n  },\n\n  /**\n   * Encode query parameters for URLs\n   * @param {Object} params - Object containing key-value pairs\n   * @returns {string} URL-encoded query string\n   */\n  encodeQueryParams(params) {\n    if (!params || typeof params !== 'object') {\n      return '';\n    }\n\n    const searchParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        searchParams.append(key, String(value));\n      }\n    });\n\n    const queryString = searchParams.toString();\n    return queryString ? `?${queryString}` : '';\n  },\n\n  /**\n   * Validate and encode a file path for B2\n   * @param {string} filePath - The file path to validate and encode\n   * @returns {string} Validated and encoded file path\n   */\n  validateAndEncodeFilePath(filePath) {\n    if (typeof filePath !== 'string') {\n      throw new Error('File path must be a string');\n    }\n\n    if (filePath.length === 0) {\n      throw new Error('File path cannot be empty');\n    }\n\n    if (filePath.length > 1024) {\n      throw new Error('File path cannot exceed 1024 characters');\n    }\n\n    // B2 doesn't allow certain characters in file names\n    const invalidChars = /[\\x00-\\x1f\\x7f]/;\n    if (invalidChars.test(filePath)) {\n      throw new Error('File path contains invalid characters');\n    }\n\n    return encodeURIComponent(filePath);\n  },\n};\n\n// Create a default instance for convenience\nexport const endpoints = new EndpointBuilder();\n\n// Export individual functions for backward compatibility\nexport const buildApiUrl = (endpoint, params, authContext) => {\n  const builder = new EndpointBuilder(authContext);\n  return builder.buildApiUrl(endpoint, params);\n};\n\nexport const buildDownloadUrl = (endpoint, params, authContext) => {\n  const builder = new EndpointBuilder(authContext);\n  return builder.buildDownloadUrl(endpoint, params);\n};\n","/**\n * Bucket Manager for B2 API\n * Handles bucket CRUD operations and upload URL generation\n */\n\nimport { BUCKET_TYPES, B2_ERROR_CODES } from '../constants.js';\nimport { Validator } from '../utils/validation.js';\nimport { EndpointBuilder } from '../utils/endpoints.js';\n\nexport class BucketManager {\n  constructor(httpClient, authManager, config = {}) {\n    this.httpClient = httpClient;\n    this.authManager = authManager;\n    this.config = config;\n    this.endpointBuilder = new EndpointBuilder();\n  }\n\n  /**\n   * Validate bucket name according to B2 requirements\n   * @param {string} bucketName - Bucket name to validate\n   * @throws {Error} If bucket name is invalid\n   */\n  validateBucketName(bucketName) {\n    if (!bucketName || typeof bucketName !== 'string') {\n      throw new Error('bucketName is required and must be a string');\n    }\n\n    if (bucketName.length < 6 || bucketName.length > 50) {\n      throw new Error('Bucket name must be between 6 and 50 characters');\n    }\n\n    // B2 bucket name requirements\n    const validPattern = /^[a-z0-9][a-z0-9\\-]*[a-z0-9]$/;\n    if (!validPattern.test(bucketName)) {\n      throw new Error(\n        'Bucket name must start and end with alphanumeric characters and contain only lowercase letters, numbers, and hyphens'\n      );\n    }\n\n    // Cannot contain consecutive hyphens\n    if (bucketName.includes('--')) {\n      throw new Error('Bucket name cannot contain consecutive hyphens');\n    }\n  }\n\n  /**\n   * Validate bucket type\n   * @param {string} bucketType - Bucket type to validate\n   * @throws {Error} If bucket type is invalid\n   */\n  validateBucketType(bucketType) {\n    if (!bucketType || typeof bucketType !== 'string') {\n      throw new Error('bucketType is required and must be a string');\n    }\n\n    const validTypes = Object.values(BUCKET_TYPES);\n    if (!validTypes.includes(bucketType)) {\n      throw new Error(\n        `Invalid bucket type. Must be one of: ${validTypes.join(', ')}`\n      );\n    }\n  }\n\n  /**\n   * Validate bucket ID\n   * @param {string} bucketId - Bucket ID to validate\n   * @throws {Error} If bucket ID is invalid\n   */\n  validateBucketId(bucketId) {\n    if (!bucketId || typeof bucketId !== 'string') {\n      throw new Error('bucketId is required and must be a string');\n    }\n\n    if (bucketId.trim().length === 0) {\n      throw new Error('bucketId cannot be empty');\n    }\n  }\n\n  /**\n   * Ensure authentication before making requests\n   * @throws {Error} If not authenticated\n   */\n  ensureAuthenticated() {\n    if (!this.authManager.isAuthenticated()) {\n      throw new Error('Not authenticated. Call authorize() first.');\n    }\n\n    // Update endpoint builder with current auth context\n    this.endpointBuilder.setAuthContext(this.authManager.getAuthContext());\n  }\n\n  /**\n   * Create a new bucket\n   * @param {Object|string} options - Bucket creation options or bucket name (for backward compatibility)\n   * @param {string} options.bucketName - Name of the bucket to create\n   * @param {string} options.bucketType - Type of bucket (allPublic or allPrivate)\n   * @param {string} [bucketType] - Bucket type (for backward compatibility when first param is string)\n   * @returns {Promise<Object>} Bucket creation response\n   */\n  async create(options, bucketType) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: create(bucketName, bucketType)\n    let bucketName, type;\n    if (typeof options === 'string') {\n      bucketName = options;\n      type = bucketType;\n    } else if (options && typeof options === 'object') {\n      bucketName = options.bucketName;\n      type = options.bucketType;\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with bucketName and bucketType, or bucketName and bucketType as separate parameters'\n      );\n    }\n\n    // Validate inputs\n    this.validateBucketName(bucketName);\n    this.validateBucketType(type);\n\n    const requestData = {\n      accountId: this.authManager.getAccountId(),\n      bucketName: bucketName,\n      bucketType: type,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getCreateBucketUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 bucket creation errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.DUPLICATE_BUCKET_NAME) {\n          const b2Error = new Error(\n            `Bucket name '${bucketName}' already exists`\n          );\n          b2Error.code = B2_ERROR_CODES.DUPLICATE_BUCKET_NAME;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n        if (error.code === B2_ERROR_CODES.INVALID_BUCKET_NAME) {\n          const b2Error = new Error(`Invalid bucket name: ${bucketName}`);\n          b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_NAME;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a bucket\n   * @param {Object|string} options - Bucket deletion options or bucket ID (for backward compatibility)\n   * @param {string} options.bucketId - ID of the bucket to delete\n   * @returns {Promise<Object>} Bucket deletion response\n   */\n  async delete(options) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: delete(bucketId)\n    let bucketId;\n    if (typeof options === 'string') {\n      bucketId = options;\n    } else if (options && typeof options === 'object') {\n      bucketId = options.bucketId;\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with bucketId or bucketId as string'\n      );\n    }\n\n    // Validate inputs\n    this.validateBucketId(bucketId);\n\n    const requestData = {\n      accountId: this.authManager.getAccountId(),\n      bucketId: bucketId,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getDeleteBucketUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 bucket deletion errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.INVALID_BUCKET_ID) {\n          const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n          b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n        if (error.code === B2_ERROR_CODES.BUCKET_NOT_EMPTY) {\n          const b2Error = new Error(\n            `Bucket is not empty and cannot be deleted`\n          );\n          b2Error.code = B2_ERROR_CODES.BUCKET_NOT_EMPTY;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * List buckets\n   * @param {Object} [options={}] - List options\n   * @returns {Promise<Object>} List of buckets response\n   */\n  async list(options = {}) {\n    this.ensureAuthenticated();\n\n    const requestData = {\n      accountId: this.authManager.getAccountId(),\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getListBucketsUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Get bucket information by name or ID\n   * @param {Object} options - Get bucket options\n   * @param {string} [options.bucketName] - Name of the bucket to get\n   * @param {string} [options.bucketId] - ID of the bucket to get\n   * @returns {Promise<Object>} Bucket information response\n   */\n  async get(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    if (!options.bucketName && !options.bucketId) {\n      throw new Error('Either bucketName or bucketId is required');\n    }\n\n    if (options.bucketName && options.bucketId) {\n      throw new Error('Cannot specify both bucketName and bucketId');\n    }\n\n    const requestData = {\n      accountId: this.authManager.getAccountId(),\n    };\n\n    // Add either bucketName or bucketId to the request\n    if (options.bucketName) {\n      this.validateBucketName(options.bucketName);\n      requestData.bucketName = options.bucketName;\n    } else {\n      this.validateBucketId(options.bucketId);\n      requestData.bucketId = options.bucketId;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getListBucketsUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update bucket type\n   * @param {Object|string} options - Bucket update options or bucket ID (for backward compatibility)\n   * @param {string} options.bucketId - ID of the bucket to update\n   * @param {string} options.bucketType - New bucket type\n   * @param {string} [bucketType] - New bucket type (for backward compatibility when first param is string)\n   * @returns {Promise<Object>} Bucket update response\n   */\n  async update(options, bucketType) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: update(bucketId, bucketType)\n    let bucketId, type;\n    if (typeof options === 'string') {\n      bucketId = options;\n      type = bucketType;\n    } else if (options && typeof options === 'object') {\n      bucketId = options.bucketId;\n      type = options.bucketType;\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with bucketId and bucketType, or bucketId and bucketType as separate parameters'\n      );\n    }\n\n    // Validate inputs\n    this.validateBucketId(bucketId);\n    this.validateBucketType(type);\n\n    const requestData = {\n      accountId: this.authManager.getAccountId(),\n      bucketId: bucketId,\n      bucketType: type,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getUpdateBucketUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 bucket update errors\n      if (\n        error.status === 400 &&\n        error.code === B2_ERROR_CODES.INVALID_BUCKET_ID\n      ) {\n        const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n        b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get upload URL for a bucket\n   * @param {Object|string} options - Upload URL options or bucket ID (for backward compatibility)\n   * @param {string} options.bucketId - ID of the bucket to get upload URL for\n   * @returns {Promise<Object>} Upload URL response\n   */\n  async getUploadUrl(options) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: getUploadUrl(bucketId)\n    let bucketId;\n    if (typeof options === 'string') {\n      bucketId = options;\n    } else if (options && typeof options === 'object') {\n      bucketId = options.bucketId;\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with bucketId or bucketId as string'\n      );\n    }\n\n    // Validate inputs\n    this.validateBucketId(bucketId);\n\n    const requestData = {\n      bucketId: bucketId,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getUploadUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 upload URL errors\n      if (\n        error.status === 400 &&\n        error.code === B2_ERROR_CODES.INVALID_BUCKET_ID\n      ) {\n        const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n        b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n}\n\n// Export bucket types for convenience\nexport { BUCKET_TYPES };\n\nexport default BucketManager;\n","/**\n * Cryptographic utilities for B2 API operations\n * Uses Node.js crypto module and Web Crypto API for browser compatibility\n */\n\n// Check if we're in Node.js or browser environment\nconst isNode =\n  typeof process !== 'undefined' && process.versions && process.versions.node;\n\n// Lazy-load crypto module to avoid top-level await\nlet crypto;\nlet cryptoPromise;\n\nfunction getCrypto() {\n  if (crypto) {\n    return crypto;\n  }\n\n  if (isNode) {\n    // Node.js environment - use dynamic import\n    if (!cryptoPromise) {\n      cryptoPromise = import('crypto').then((cryptoModule) => {\n        crypto = cryptoModule;\n        return crypto;\n      });\n    }\n    return cryptoPromise;\n  } else {\n    // Browser environment - use Web Crypto API\n    crypto = globalThis.crypto;\n    return crypto;\n  }\n}\n\n/**\n * SHA1 hashing utilities for file integrity verification\n */\nexport class Sha1Hasher {\n  /**\n   * Calculate SHA1 hash of data\n   * @param {Buffer|Uint8Array|string} data - Data to hash\n   * @returns {Promise<string>} SHA1 hash as hex string\n   */\n  static async hash(data) {\n    if (isNode) {\n      return this.hashNode(data);\n    } else {\n      return this.hashBrowser(data);\n    }\n  }\n\n  /**\n   * Calculate SHA1 hash using Node.js crypto module\n   * @param {Buffer|string} data - Data to hash\n   * @returns {Promise<string>} SHA1 hash as hex string\n   */\n  static async hashNode(data) {\n    const cryptoModule = await getCrypto();\n    const hash = cryptoModule.createHash('sha1');\n    hash.update(data);\n    return hash.digest('hex');\n  }\n\n  /**\n   * Calculate SHA1 hash using Web Crypto API\n   * @param {Uint8Array|string} data - Data to hash\n   * @returns {Promise<string>} SHA1 hash as hex string\n   */\n  static async hashBrowser(data) {\n    // Convert string to Uint8Array if needed\n    if (typeof data === 'string') {\n      data = new TextEncoder().encode(data);\n    }\n\n    // Calculate hash using Web Crypto API\n    const hashBuffer = await crypto.subtle.digest('SHA-1', data);\n\n    // Convert to hex string\n    const hashArray = new Uint8Array(hashBuffer);\n    return Array.from(hashArray)\n      .map((byte) => byte.toString(16).padStart(2, '0'))\n      .join('');\n  }\n\n  /**\n   * Create a streaming SHA1 hasher for large files\n   * @returns {Sha1Stream} Streaming hasher instance\n   */\n  static createStream() {\n    return new Sha1Stream();\n  }\n\n  /**\n   * Verify SHA1 hash matches expected value\n   * @param {Buffer|Uint8Array|string} data - Data to verify\n   * @param {string} expectedHash - Expected SHA1 hash\n   * @returns {Promise<boolean>} True if hash matches\n   */\n  static async verify(data, expectedHash) {\n    const actualHash = await this.hash(data);\n    return actualHash.toLowerCase() === expectedHash.toLowerCase();\n  }\n\n  /**\n   * Calculate SHA1 hash of a file (Node.js only)\n   * @param {string} filePath - Path to file\n   * @returns {Promise<string>} SHA1 hash as hex string\n   */\n  static async hashFile(filePath) {\n    if (!isNode) {\n      throw new Error('File hashing is only available in Node.js environment');\n    }\n\n    const fs = await import('fs');\n    const stream = fs.createReadStream(filePath);\n    const hasher = this.createStream();\n\n    return new Promise((resolve, reject) => {\n      stream.on('data', (chunk) => hasher.update(chunk));\n      stream.on('end', () => resolve(hasher.digest()));\n      stream.on('error', reject);\n    });\n  }\n}\n\n/**\n * Streaming SHA1 hasher for processing large amounts of data\n */\nexport class Sha1Stream {\n  constructor() {\n    this.isNode = isNode;\n    if (isNode) {\n      this.cryptoPromise = getCrypto();\n      this.hash = null;\n    } else {\n      this.chunks = [];\n    }\n  }\n\n  /**\n   * Initialize the hasher (async for Node.js)\n   * @returns {Promise<void>}\n   */\n  async init() {\n    if (this.isNode && !this.hash) {\n      const cryptoModule = await this.cryptoPromise;\n      this.hash = cryptoModule.createHash('sha1');\n    }\n  }\n\n  /**\n   * Update hash with new data\n   * @param {Buffer|Uint8Array|string} data - Data to add to hash\n   */\n  async update(data) {\n    if (this.isNode) {\n      await this.init();\n      this.hash.update(data);\n    } else {\n      // Store chunks for browser processing\n      if (typeof data === 'string') {\n        data = new TextEncoder().encode(data);\n      }\n      this.chunks.push(data);\n    }\n  }\n\n  /**\n   * Finalize hash and return result\n   * @returns {Promise<string>} SHA1 hash as hex string\n   */\n  async digest() {\n    if (this.isNode) {\n      await this.init();\n      return this.hash.digest('hex');\n    } else {\n      // Combine all chunks and hash in browser\n      const totalLength = this.chunks.reduce(\n        (sum, chunk) => sum + chunk.length,\n        0\n      );\n      const combined = new Uint8Array(totalLength);\n      let offset = 0;\n\n      for (const chunk of this.chunks) {\n        combined.set(chunk, offset);\n        offset += chunk.length;\n      }\n\n      return Sha1Hasher.hashBrowser(combined);\n    }\n  }\n}\n\n/**\n * Utility functions for working with hashes and checksums\n */\nexport const HashUtils = {\n  /**\n   * Validate SHA1 hash format\n   * @param {string} hash - Hash to validate\n   * @returns {boolean} True if valid SHA1 format\n   */\n  isValidSha1(hash) {\n    return typeof hash === 'string' && /^[a-fA-F0-9]{40}$/.test(hash);\n  },\n\n  /**\n   * Normalize SHA1 hash to lowercase\n   * @param {string} hash - Hash to normalize\n   * @returns {string} Normalized hash\n   */\n  normalizeSha1(hash) {\n    if (!this.isValidSha1(hash)) {\n      throw new Error('Invalid SHA1 hash format');\n    }\n    return hash.toLowerCase();\n  },\n\n  /**\n   * Compare two SHA1 hashes for equality\n   * @param {string} hash1 - First hash\n   * @param {string} hash2 - Second hash\n   * @returns {boolean} True if hashes are equal\n   */\n  compareSha1(hash1, hash2) {\n    if (!this.isValidSha1(hash1) || !this.isValidSha1(hash2)) {\n      return false;\n    }\n    return hash1.toLowerCase() === hash2.toLowerCase();\n  },\n\n  /**\n   * Generate a random SHA1-like string for testing\n   * @returns {string} Random 40-character hex string\n   */\n  generateRandomSha1() {\n    const chars = '0123456789abcdef';\n    let result = '';\n    for (let i = 0; i < 40; i++) {\n      result += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return result;\n  },\n};\n\n/**\n * Progress tracking utilities for hash calculation\n */\nexport class ProgressiveHasher {\n  constructor(onProgress) {\n    this.hasher = new Sha1Stream();\n    this.onProgress = onProgress;\n    this.totalBytes = 0;\n    this.processedBytes = 0;\n  }\n\n  /**\n   * Set the total size for progress calculation\n   * @param {number} totalSize - Total size in bytes\n   */\n  setTotalSize(totalSize) {\n    this.totalBytes = totalSize;\n  }\n\n  /**\n   * Update hash with data and report progress\n   * @param {Buffer|Uint8Array|string} data - Data to hash\n   */\n  async update(data) {\n    await this.hasher.update(data);\n\n    if (typeof data === 'string') {\n      this.processedBytes += new TextEncoder().encode(data).length;\n    } else {\n      this.processedBytes += data.length;\n    }\n\n    if (this.onProgress && this.totalBytes > 0) {\n      const progress = Math.min(this.processedBytes / this.totalBytes, 1);\n      this.onProgress({\n        loaded: this.processedBytes,\n        total: this.totalBytes,\n        progress: progress,\n      });\n    }\n  }\n\n  /**\n   * Finalize hash calculation\n   * @returns {Promise<string>} SHA1 hash as hex string\n   */\n  async digest() {\n    return await this.hasher.digest();\n  }\n}\n\n// Export convenience functions\nexport const sha1 = Sha1Hasher.hash.bind(Sha1Hasher);\nexport const verifySha1 = Sha1Hasher.verify.bind(Sha1Hasher);\nexport const createSha1Stream = Sha1Hasher.createStream.bind(Sha1Hasher);\n","/**\n * File Manager for B2 API\n * Handles file upload, download, listing, and management operations\n */\n\nimport { B2_ERROR_CODES, CONTENT_TYPES, DEFAULT_CONFIG } from '../constants.js';\nimport { Validator } from '../utils/validation.js';\nimport { EndpointBuilder } from '../utils/endpoints.js';\nimport { HeaderUtils } from '../utils/headers.js';\nimport { Sha1Hasher } from '../utils/crypto.js';\n\nexport class FileManager {\n  constructor(httpClient, authManager, config = {}) {\n    this.httpClient = httpClient;\n    this.authManager = authManager;\n    this.config = config;\n    this.endpointBuilder = new EndpointBuilder();\n  }\n\n  /**\n   * Ensure authentication before making requests\n   * @throws {Error} If not authenticated\n   */\n  ensureAuthenticated() {\n    if (!this.authManager.isAuthenticated()) {\n      throw new Error('Not authenticated. Call authorize() first.');\n    }\n\n    // Update endpoint builder with current auth context\n    this.endpointBuilder.setAuthContext(this.authManager.getAuthContext());\n  }\n\n  /**\n   * Validate file name according to B2 requirements\n   * @param {string} fileName - File name to validate\n   * @throws {Error} If file name is invalid\n   */\n  validateFileName(fileName) {\n    if (typeof fileName !== 'string') {\n      throw new Error('fileName is required and must be a string');\n    }\n\n    if (fileName.length === 0) {\n      throw new Error('File name cannot be empty');\n    }\n\n    if (fileName.length > 1024) {\n      throw new Error('File name cannot exceed 1024 characters');\n    }\n\n    // B2 doesn't allow certain characters in file names\n    const invalidChars = /[\\x00-\\x1f\\x7f]/;\n    if (invalidChars.test(fileName)) {\n      throw new Error('File name contains invalid characters');\n    }\n  }\n\n  /**\n   * Validate file ID\n   * @param {string} fileId - File ID to validate\n   * @throws {Error} If file ID is invalid\n   */\n  validateFileId(fileId) {\n    if (typeof fileId !== 'string') {\n      throw new Error('fileId is required and must be a string');\n    }\n\n    if (fileId.trim().length === 0) {\n      throw new Error('fileId cannot be empty');\n    }\n  }\n\n  /**\n   * Upload a file to B2\n   * @param {Object} options - Upload options\n   * @param {string} options.uploadUrl - Upload URL from getUploadUrl\n   * @param {string} options.uploadAuthToken - Upload authorization token\n   * @param {string} options.fileName - Name of the file\n   * @param {Buffer|Uint8Array|string} options.data - File data to upload\n   * @param {string} [options.contentType] - Content type (defaults to application/octet-stream)\n   * @param {string} [options.contentSha1] - SHA1 hash of content (will be calculated if not provided)\n   * @param {Object} [options.info] - File info metadata\n   * @param {Function} [options.onUploadProgress] - Progress callback function\n   * @returns {Promise<Object>} Upload response\n   */\n  async uploadFile(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const {\n      uploadUrl,\n      uploadAuthToken,\n      fileName,\n      data,\n      contentType = CONTENT_TYPES.OCTET_STREAM,\n      contentSha1,\n      info,\n      onUploadProgress,\n    } = options;\n\n    // Validate required parameters\n    if (!uploadUrl || typeof uploadUrl !== 'string') {\n      throw new Error('uploadUrl is required and must be a string');\n    }\n\n    if (!uploadAuthToken || typeof uploadAuthToken !== 'string') {\n      throw new Error('uploadAuthToken is required and must be a string');\n    }\n\n    this.validateFileName(fileName);\n\n    if (!data) {\n      throw new Error('data is required');\n    }\n\n    // Calculate content length\n    let contentLength;\n    if (typeof data === 'string') {\n      contentLength = new TextEncoder().encode(data).length;\n    } else {\n      contentLength = data.length;\n    }\n\n    // Calculate SHA1 if not provided\n    let sha1Hash = contentSha1;\n    if (!sha1Hash) {\n      sha1Hash = await Sha1Hasher.hash(data);\n    }\n\n    // Create upload headers\n    const headers = HeaderUtils.createUploadHeaders({\n      authToken: uploadAuthToken,\n      fileName,\n      contentType,\n      contentSha1: sha1Hash,\n      contentLength,\n      info,\n    });\n\n    try {\n      const response = await this.httpClient.post(uploadUrl, data, {\n        headers,\n        timeout: this.config.uploadTimeout || this.config.timeout,\n        onUploadProgress,\n      });\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 upload errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.FILE_NOT_PRESENT) {\n          const b2Error = new Error(`File upload failed: ${error.message}`);\n          b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get file information\n   * @param {Object|string} options - File info options or file ID (for backward compatibility)\n   * @param {string} options.fileId - ID of the file to get info for\n   * @returns {Promise<Object>} File information response\n   */\n  async getFileInfo(options) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: getFileInfo(fileId)\n    let fileId;\n    if (typeof options === 'string') {\n      fileId = options;\n    } else if (options && typeof options === 'object') {\n      fileId = options.fileId;\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with fileId or fileId as string'\n      );\n    }\n\n    // Validate inputs\n    this.validateFileId(fileId);\n\n    const requestData = {\n      fileId: fileId,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getFileInfoUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 file info errors\n      if (\n        error.status === 400 &&\n        error.code === B2_ERROR_CODES.FILE_NOT_PRESENT\n      ) {\n        const b2Error = new Error(`File not found: ${fileId}`);\n        b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a file version\n   * @param {Object} options - Delete options\n   * @param {string} options.fileId - ID of the file to delete\n   * @param {string} options.fileName - Name of the file to delete\n   * @returns {Promise<Object>} Delete response\n   */\n  async deleteFileVersion(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { fileId, fileName } = options;\n\n    // Validate inputs\n    this.validateFileId(fileId);\n    this.validateFileName(fileName);\n\n    const requestData = {\n      fileId: fileId,\n      fileName: fileName,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getDeleteFileVersionUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 delete errors\n      if (\n        error.status === 400 &&\n        error.code === B2_ERROR_CODES.FILE_NOT_PRESENT\n      ) {\n        const b2Error = new Error(`File not found: ${fileId}`);\n        b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * List file names in a bucket\n   * @param {Object} options - List options\n   * @param {string} options.bucketId - ID of the bucket to list files from\n   * @param {string} [options.startFileName] - File name to start listing from\n   * @param {number} [options.maxFileCount] - Maximum number of files to return (default: 100, max: 10000)\n   * @param {string} [options.prefix] - Only return file names that start with this prefix\n   * @param {string} [options.delimiter] - Delimiter for grouping file names\n   * @returns {Promise<Object>} List of file names response\n   */\n  async listFileNames(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { bucketId, startFileName, maxFileCount, prefix, delimiter } =\n      options;\n\n    // Validate required parameters\n    if (typeof bucketId !== 'string') {\n      throw new Error('bucketId is required and must be a string');\n    }\n\n    if (bucketId.trim().length === 0) {\n      throw new Error('bucketId cannot be empty');\n    }\n\n    // Validate optional parameters\n    if (maxFileCount !== undefined) {\n      if (\n        typeof maxFileCount !== 'number' ||\n        maxFileCount < 1 ||\n        maxFileCount > 10000\n      ) {\n        throw new Error('maxFileCount must be a number between 1 and 10000');\n      }\n    }\n\n    if (startFileName !== undefined && typeof startFileName !== 'string') {\n      throw new Error('startFileName must be a string');\n    }\n\n    if (prefix !== undefined && typeof prefix !== 'string') {\n      throw new Error('prefix must be a string');\n    }\n\n    if (delimiter !== undefined && typeof delimiter !== 'string') {\n      throw new Error('delimiter must be a string');\n    }\n\n    const requestData = {\n      bucketId: bucketId,\n    };\n\n    // Add optional parameters\n    if (startFileName !== undefined) {\n      requestData.startFileName = startFileName;\n    }\n    if (maxFileCount !== undefined) {\n      requestData.maxFileCount = maxFileCount;\n    }\n    if (prefix !== undefined) {\n      requestData.prefix = prefix;\n    }\n    if (delimiter !== undefined) {\n      requestData.delimiter = delimiter;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getListFileNamesUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 list errors\n      if (\n        error.status === 400 &&\n        error.code === B2_ERROR_CODES.INVALID_BUCKET_ID\n      ) {\n        const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n        b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * List file versions in a bucket\n   * @param {Object} options - List options\n   * @param {string} options.bucketId - ID of the bucket to list file versions from\n   * @param {string} [options.startFileName] - File name to start listing from\n   * @param {string} [options.startFileId] - File ID to start listing from\n   * @param {number} [options.maxFileCount] - Maximum number of file versions to return (default: 100, max: 10000)\n   * @param {string} [options.prefix] - Only return file names that start with this prefix\n   * @param {string} [options.delimiter] - Delimiter for grouping file names\n   * @returns {Promise<Object>} List of file versions response\n   */\n  async listFileVersions(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const {\n      bucketId,\n      startFileName,\n      startFileId,\n      maxFileCount,\n      prefix,\n      delimiter,\n    } = options;\n\n    // Validate required parameters\n    if (typeof bucketId !== 'string') {\n      throw new Error('bucketId is required and must be a string');\n    }\n\n    if (bucketId.trim().length === 0) {\n      throw new Error('bucketId cannot be empty');\n    }\n\n    // Validate optional parameters\n    if (maxFileCount !== undefined) {\n      if (\n        typeof maxFileCount !== 'number' ||\n        maxFileCount < 1 ||\n        maxFileCount > 10000\n      ) {\n        throw new Error('maxFileCount must be a number between 1 and 10000');\n      }\n    }\n\n    if (startFileName !== undefined && typeof startFileName !== 'string') {\n      throw new Error('startFileName must be a string');\n    }\n\n    if (startFileId !== undefined && typeof startFileId !== 'string') {\n      throw new Error('startFileId must be a string');\n    }\n\n    if (prefix !== undefined && typeof prefix !== 'string') {\n      throw new Error('prefix must be a string');\n    }\n\n    if (delimiter !== undefined && typeof delimiter !== 'string') {\n      throw new Error('delimiter must be a string');\n    }\n\n    const requestData = {\n      bucketId: bucketId,\n    };\n\n    // Add optional parameters\n    if (startFileName !== undefined) {\n      requestData.startFileName = startFileName;\n    }\n    if (startFileId !== undefined) {\n      requestData.startFileId = startFileId;\n    }\n    if (maxFileCount !== undefined) {\n      requestData.maxFileCount = maxFileCount;\n    }\n    if (prefix !== undefined) {\n      requestData.prefix = prefix;\n    }\n    if (delimiter !== undefined) {\n      requestData.delimiter = delimiter;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getListFileVersionsUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 list errors\n      if (\n        error.status === 400 &&\n        error.code === B2_ERROR_CODES.INVALID_BUCKET_ID\n      ) {\n        const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n        b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Hide a file (make it invisible in file listings)\n   * @param {Object} options - Hide file options\n   * @param {string} options.bucketId - ID of the bucket containing the file\n   * @param {string} options.fileName - Name of the file to hide\n   * @returns {Promise<Object>} Hide file response\n   */\n  async hideFile(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { bucketId, fileName } = options;\n\n    // Validate required parameters\n    if (typeof bucketId !== 'string') {\n      throw new Error('bucketId is required and must be a string');\n    }\n\n    if (bucketId.trim().length === 0) {\n      throw new Error('bucketId cannot be empty');\n    }\n\n    this.validateFileName(fileName);\n\n    const requestData = {\n      bucketId: bucketId,\n      fileName: fileName,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getHideFileUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 hide file errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.INVALID_BUCKET_ID) {\n          const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n          b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n        if (error.code === B2_ERROR_CODES.FILE_NOT_PRESENT) {\n          const b2Error = new Error(`File not found: ${fileName}`);\n          b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Download a file by name\n   * @param {Object|string} options - Download options or bucket name (for backward compatibility)\n   * @param {string} options.bucketName - Name of the bucket containing the file\n   * @param {string} options.fileName - Name of the file to download\n   * @param {string} [options.responseType] - Response type: 'json', 'text', 'arraybuffer', 'blob', 'stream' (default: 'arraybuffer')\n   * @param {Function} [options.onDownloadProgress] - Progress callback function\n   * @param {Object} [options.headers] - Additional headers for the request\n   * @param {string} [fileName] - File name (for backward compatibility when first param is bucket name)\n   * @returns {Promise<Object>} Download response with file data\n   */\n  async downloadFileByName(options, fileName) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: downloadFileByName(bucketName, fileName)\n    let bucketName, actualFileName, responseType, onDownloadProgress, headers;\n\n    if (typeof options === 'string') {\n      // Legacy format: downloadFileByName(bucketName, fileName)\n      bucketName = options;\n      actualFileName = fileName;\n      responseType = 'arraybuffer';\n      onDownloadProgress = undefined;\n      headers = {};\n    } else if (options && typeof options === 'object') {\n      // New format: downloadFileByName({ bucketName, fileName, ... })\n      bucketName = options.bucketName;\n      actualFileName = options.fileName;\n      responseType = options.responseType || 'arraybuffer';\n      onDownloadProgress = options.onDownloadProgress;\n      headers = options.headers || {};\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with bucketName and fileName, or bucketName and fileName as separate strings'\n      );\n    }\n\n    // Validate required parameters\n    if (typeof bucketName !== 'string') {\n      throw new Error('bucketName is required and must be a string');\n    }\n\n    if (bucketName.trim().length === 0) {\n      throw new Error('bucketName cannot be empty');\n    }\n\n    this.validateFileName(actualFileName);\n\n    // Validate response type\n    const validResponseTypes = [\n      'json',\n      'text',\n      'arraybuffer',\n      'blob',\n      'stream',\n    ];\n    if (!validResponseTypes.includes(responseType)) {\n      throw new Error(\n        `Invalid responseType. Must be one of: ${validResponseTypes.join(', ')}`\n      );\n    }\n\n    try {\n      const downloadUrl = this.endpointBuilder.getDownloadFileByNameUrl(\n        bucketName,\n        actualFileName\n      );\n\n      const response = await this.httpClient.get(downloadUrl, {\n        headers: {\n          ...this.authManager.getAuthHeaders(),\n          ...headers,\n        },\n        responseType,\n        onDownloadProgress,\n        timeout: this.config.downloadTimeout || this.config.timeout,\n      });\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 download errors\n      if (error.status === 404) {\n        const b2Error = new Error(\n          `File not found: ${actualFileName} in bucket ${bucketName}`\n        );\n        b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n        b2Error.status = 404;\n        throw b2Error;\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(\n          `Unauthorized access to file: ${actualFileName}`\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Download a file by ID\n   * @param {Object|string} options - Download options or file ID (for backward compatibility)\n   * @param {string} options.fileId - ID of the file to download\n   * @param {string} [options.responseType] - Response type: 'json', 'text', 'arraybuffer', 'blob', 'stream' (default: 'arraybuffer')\n   * @param {Function} [options.onDownloadProgress] - Progress callback function\n   * @param {Object} [options.headers] - Additional headers for the request\n   * @returns {Promise<Object>} Download response with file data\n   */\n  async downloadFileById(options) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: downloadFileById(fileId)\n    let fileId, responseType, onDownloadProgress, headers;\n\n    if (typeof options === 'string') {\n      // Legacy format: downloadFileById(fileId)\n      fileId = options;\n      responseType = 'arraybuffer';\n      onDownloadProgress = undefined;\n      headers = {};\n    } else if (options && typeof options === 'object') {\n      // New format: downloadFileById({ fileId, ... })\n      fileId = options.fileId;\n      responseType = options.responseType || 'arraybuffer';\n      onDownloadProgress = options.onDownloadProgress;\n      headers = options.headers || {};\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with fileId or fileId as string'\n      );\n    }\n\n    // Validate required parameters\n    this.validateFileId(fileId);\n\n    // Validate response type\n    const validResponseTypes = [\n      'json',\n      'text',\n      'arraybuffer',\n      'blob',\n      'stream',\n    ];\n    if (!validResponseTypes.includes(responseType)) {\n      throw new Error(\n        `Invalid responseType. Must be one of: ${validResponseTypes.join(', ')}`\n      );\n    }\n\n    try {\n      const downloadUrl = this.endpointBuilder.getDownloadFileByIdUrl(fileId);\n\n      const response = await this.httpClient.get(downloadUrl, {\n        headers: {\n          ...this.authManager.getAuthHeaders(),\n          ...headers,\n        },\n        responseType,\n        onDownloadProgress,\n        timeout: this.config.downloadTimeout || this.config.timeout,\n      });\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 download errors\n      if (error.status === 404) {\n        const b2Error = new Error(`File not found: ${fileId}`);\n        b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n        b2Error.status = 404;\n        throw b2Error;\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(`Unauthorized access to file: ${fileId}`);\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get download authorization for private files\n   * @param {Object} options - Download authorization options\n   * @param {string} options.bucketId - ID of the bucket containing the files\n   * @param {string} options.fileNamePrefix - Prefix of file names to authorize (can be empty string for all files)\n   * @param {number} [options.validDurationInSeconds] - How long the authorization is valid (default: 604800 = 7 days, max: 604800)\n   * @param {string} [options.b2ContentDisposition] - Content-Disposition header value for downloads\n   * @returns {Promise<Object>} Download authorization response\n   */\n  async getDownloadAuthorization(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const {\n      bucketId,\n      fileNamePrefix,\n      validDurationInSeconds = 604800, // 7 days default\n      b2ContentDisposition,\n    } = options;\n\n    // Validate required parameters\n    if (typeof bucketId !== 'string') {\n      throw new Error('bucketId is required and must be a string');\n    }\n\n    if (bucketId.trim().length === 0) {\n      throw new Error('bucketId cannot be empty');\n    }\n\n    if (typeof fileNamePrefix !== 'string') {\n      throw new Error(\n        'fileNamePrefix is required and must be a string (can be empty)'\n      );\n    }\n\n    // Validate optional parameters\n    if (validDurationInSeconds !== undefined) {\n      if (\n        typeof validDurationInSeconds !== 'number' ||\n        validDurationInSeconds < 1 ||\n        validDurationInSeconds > 604800\n      ) {\n        throw new Error(\n          'validDurationInSeconds must be a number between 1 and 604800 (7 days)'\n        );\n      }\n    }\n\n    if (\n      b2ContentDisposition !== undefined &&\n      typeof b2ContentDisposition !== 'string'\n    ) {\n      throw new Error('b2ContentDisposition must be a string');\n    }\n\n    const requestData = {\n      bucketId: bucketId,\n      fileNamePrefix: fileNamePrefix,\n      validDurationInSeconds: validDurationInSeconds,\n    };\n\n    // Add optional parameters\n    if (b2ContentDisposition !== undefined) {\n      requestData.b2ContentDisposition = b2ContentDisposition;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getDownloadAuthorizationUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 download authorization errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.INVALID_BUCKET_ID) {\n          const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n          b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n        if (error.code === B2_ERROR_CODES.NOT_ALLOWED) {\n          const b2Error = new Error(\n            `Not allowed to get download authorization for bucket: ${bucketId}`\n          );\n          b2Error.code = B2_ERROR_CODES.NOT_ALLOWED;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(\n          `Unauthorized: Invalid credentials for download authorization`\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  // ===== LARGE FILE OPERATIONS =====\n\n  /**\n   * Start a large file upload\n   * @param {Object} options - Start large file options\n   * @param {string} options.bucketId - ID of the bucket to upload to\n   * @param {string} options.fileName - Name of the file to upload\n   * @param {string} [options.contentType] - Content type (defaults to application/octet-stream)\n   * @param {Object} [options.fileInfo] - File info metadata\n   * @returns {Promise<Object>} Start large file response containing fileId\n   */\n  async startLargeFile(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const {\n      bucketId,\n      fileName,\n      contentType = CONTENT_TYPES.OCTET_STREAM,\n      fileInfo,\n    } = options;\n\n    // Validate required parameters\n    if (typeof bucketId !== 'string') {\n      throw new Error('bucketId is required and must be a string');\n    }\n\n    if (bucketId.trim().length === 0) {\n      throw new Error('bucketId cannot be empty');\n    }\n\n    this.validateFileName(fileName);\n\n    // Validate optional parameters\n    if (contentType !== undefined && typeof contentType !== 'string') {\n      throw new Error('contentType must be a string');\n    }\n\n    if (\n      fileInfo !== undefined &&\n      (typeof fileInfo !== 'object' || fileInfo === null)\n    ) {\n      throw new Error('fileInfo must be an object');\n    }\n\n    const requestData = {\n      bucketId: bucketId,\n      fileName: fileName,\n      contentType: contentType,\n    };\n\n    // Add file info if provided\n    if (fileInfo) {\n      requestData.fileInfo = fileInfo;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getStartLargeFileUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 start large file errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.INVALID_BUCKET_ID) {\n          const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n          b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n        if (error.code === B2_ERROR_CODES.NOT_ALLOWED) {\n          const b2Error = new Error(\n            `Not allowed to upload to bucket: ${bucketId}`\n          );\n          b2Error.code = B2_ERROR_CODES.NOT_ALLOWED;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(\n          `Unauthorized: Invalid credentials for large file upload`\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get upload URL for a large file part\n   * @param {Object} options - Get upload part URL options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @returns {Promise<Object>} Upload part URL response containing uploadUrl and authorizationToken\n   */\n  async getUploadPartUrl(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { fileId } = options;\n\n    // Validate required parameters\n    this.validateFileId(fileId);\n\n    const requestData = {\n      fileId: fileId,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getUploadPartUrlEndpoint(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 get upload part URL errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.FILE_NOT_PRESENT) {\n          const b2Error = new Error(`Large file not found: ${fileId}`);\n          b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(\n          `Unauthorized: Invalid credentials for upload part URL`\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Upload a part of a large file\n   * @param {Object} options - Upload part options\n   * @param {string} options.uploadUrl - Upload URL from getUploadPartUrl\n   * @param {string} options.authorizationToken - Authorization token from getUploadPartUrl\n   * @param {number} options.partNumber - Part number (1-based, must be between 1 and 10000)\n   * @param {Buffer|Uint8Array|string} options.data - Part data to upload\n   * @param {string} [options.contentSha1] - SHA1 hash of part content (will be calculated if not provided)\n   * @param {Function} [options.onUploadProgress] - Progress callback function\n   * @returns {Promise<Object>} Upload part response\n   */\n  async uploadPart(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const {\n      uploadUrl,\n      authorizationToken,\n      partNumber,\n      data,\n      contentSha1,\n      onUploadProgress,\n    } = options;\n\n    // Validate required parameters\n    if (!uploadUrl || typeof uploadUrl !== 'string') {\n      throw new Error('uploadUrl is required and must be a string');\n    }\n\n    if (!authorizationToken || typeof authorizationToken !== 'string') {\n      throw new Error('authorizationToken is required and must be a string');\n    }\n\n    if (\n      typeof partNumber !== 'number' ||\n      partNumber < 1 ||\n      partNumber > 10000\n    ) {\n      throw new Error('partNumber must be a number between 1 and 10000');\n    }\n\n    if (!data) {\n      throw new Error('data is required');\n    }\n\n    // Calculate content length\n    let contentLength;\n    if (typeof data === 'string') {\n      contentLength = new TextEncoder().encode(data).length;\n    } else {\n      contentLength = data.length;\n    }\n\n    // Validate part size (minimum 5MB except for last part)\n    const MIN_PART_SIZE = 5 * 1024 * 1024; // 5MB\n    const MAX_PART_SIZE = 5 * 1024 * 1024 * 1024; // 5GB\n\n    if (contentLength > MAX_PART_SIZE) {\n      throw new Error(`Part size cannot exceed ${MAX_PART_SIZE} bytes (5GB)`);\n    }\n\n    // Calculate SHA1 if not provided\n    let sha1Hash = contentSha1;\n    if (!sha1Hash) {\n      sha1Hash = await Sha1Hasher.hash(data);\n    }\n\n    // Create upload headers for part\n    const headers = {\n      Authorization: authorizationToken,\n      'Content-Type': CONTENT_TYPES.OCTET_STREAM,\n      'Content-Length': contentLength.toString(),\n      'X-Bz-Content-Sha1': sha1Hash,\n      'X-Bz-Part-Number': partNumber.toString(),\n    };\n\n    try {\n      const response = await this.httpClient.post(uploadUrl, data, {\n        headers,\n        timeout: this.config.uploadTimeout || this.config.timeout,\n        onUploadProgress,\n      });\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 upload part errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.FILE_NOT_PRESENT) {\n          const b2Error = new Error(\n            `Large file upload failed: ${error.message}`\n          );\n          b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Finish a large file upload\n   * @param {Object} options - Finish large file options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @param {Array<string>} options.partSha1Array - Array of SHA1 hashes for each part in order\n   * @returns {Promise<Object>} Finish large file response\n   */\n  async finishLargeFile(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { fileId, partSha1Array } = options;\n\n    // Validate required parameters\n    this.validateFileId(fileId);\n\n    if (!Array.isArray(partSha1Array)) {\n      throw new Error('partSha1Array is required and must be an array');\n    }\n\n    if (partSha1Array.length === 0) {\n      throw new Error('partSha1Array cannot be empty');\n    }\n\n    if (partSha1Array.length > DEFAULT_CONFIG.MAX_PARTS_COUNT) {\n      throw new Error(\n        `partSha1Array cannot have more than ${DEFAULT_CONFIG.MAX_PARTS_COUNT} parts`\n      );\n    }\n\n    // Validate each SHA1 hash\n    partSha1Array.forEach((sha1, index) => {\n      if (typeof sha1 !== 'string') {\n        throw new Error(`partSha1Array[${index}] must be a string`);\n      }\n      if (sha1.length !== 40) {\n        throw new Error(\n          `partSha1Array[${index}] must be a 40-character SHA1 hash`\n        );\n      }\n      if (!/^[a-fA-F0-9]{40}$/.test(sha1)) {\n        throw new Error(\n          `partSha1Array[${index}] must be a valid hexadecimal SHA1 hash`\n        );\n      }\n    });\n\n    const requestData = {\n      fileId: fileId,\n      partSha1Array: partSha1Array,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getFinishLargeFileUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 finish large file errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.FILE_NOT_PRESENT) {\n          const b2Error = new Error(`Large file not found: ${fileId}`);\n          b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(\n          `Unauthorized: Invalid credentials for finishing large file`\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a large file upload\n   * @param {Object} options - Cancel large file options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @returns {Promise<Object>} Cancel large file response\n   */\n  async cancelLargeFile(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { fileId } = options;\n\n    // Validate required parameters\n    this.validateFileId(fileId);\n\n    const requestData = {\n      fileId: fileId,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getCancelLargeFileUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 cancel large file errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.FILE_NOT_PRESENT) {\n          const b2Error = new Error(`Large file not found: ${fileId}`);\n          b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(\n          `Unauthorized: Invalid credentials for canceling large file`\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * List parts of a large file upload\n   * @param {Object} options - List parts options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @param {number} [options.startPartNumber] - Part number to start listing from (1-based)\n   * @param {number} [options.maxPartCount] - Maximum number of parts to return (default: 100, max: 10000)\n   * @returns {Promise<Object>} List parts response\n   */\n  async listParts(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { fileId, startPartNumber, maxPartCount } = options;\n\n    // Validate required parameters\n    this.validateFileId(fileId);\n\n    // Validate optional parameters\n    if (startPartNumber !== undefined) {\n      if (\n        typeof startPartNumber !== 'number' ||\n        startPartNumber < 1 ||\n        startPartNumber > DEFAULT_CONFIG.MAX_PARTS_COUNT\n      ) {\n        throw new Error(\n          `startPartNumber must be a number between 1 and ${DEFAULT_CONFIG.MAX_PARTS_COUNT}`\n        );\n      }\n    }\n\n    if (maxPartCount !== undefined) {\n      if (\n        typeof maxPartCount !== 'number' ||\n        maxPartCount < 1 ||\n        maxPartCount > 10000\n      ) {\n        throw new Error('maxPartCount must be a number between 1 and 10000');\n      }\n    }\n\n    const requestData = {\n      fileId: fileId,\n    };\n\n    // Add optional parameters\n    if (startPartNumber !== undefined) {\n      requestData.startPartNumber = startPartNumber;\n    }\n    if (maxPartCount !== undefined) {\n      requestData.maxPartCount = maxPartCount;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getListPartsUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 list parts errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.FILE_NOT_PRESENT) {\n          const b2Error = new Error(`Large file not found: ${fileId}`);\n          b2Error.code = B2_ERROR_CODES.FILE_NOT_PRESENT;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      if (error.status === 401) {\n        const b2Error = new Error(\n          `Unauthorized: Invalid credentials for listing parts`\n        );\n        b2Error.code = B2_ERROR_CODES.BAD_AUTH_TOKEN;\n        b2Error.status = 401;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * List unfinished large file uploads\n   * @param {Object} options - List unfinished large files options\n   * @param {string} options.bucketId - ID of the bucket to list unfinished files from\n   * @param {string} [options.startFileId] - File ID to start listing from\n   * @param {number} [options.maxFileCount] - Maximum number of files to return (default: 100, max: 10000)\n   * @returns {Promise<Object>} List unfinished large files response\n   */\n  async listUnfinishedLargeFiles(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const { bucketId, startFileId, maxFileCount } = options;\n\n    // Validate required parameters\n    if (typeof bucketId !== 'string') {\n      throw new Error('bucketId is required and must be a string');\n    }\n\n    if (bucketId.trim().length === 0) {\n      throw new Error('bucketId cannot be empty');\n    }\n\n    // Validate optional parameters\n    if (maxFileCount !== undefined) {\n      if (\n        typeof maxFileCount !== 'number' ||\n        maxFileCount < 1 ||\n        maxFileCount > 10000\n      ) {\n        throw new Error('maxFileCount must be a number between 1 and 10000');\n      }\n    }\n\n    if (startFileId !== undefined && typeof startFileId !== 'string') {\n      throw new Error('startFileId must be a string');\n    }\n\n    const requestData = {\n      bucketId: bucketId,\n    };\n\n    // Add optional parameters\n    if (startFileId !== undefined) {\n      requestData.startFileId = startFileId;\n    }\n    if (maxFileCount !== undefined) {\n      requestData.maxFileCount = maxFileCount;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getListUnfinishedLargeFilesUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 list errors\n      if (\n        error.status === 400 &&\n        error.code === B2_ERROR_CODES.INVALID_BUCKET_ID\n      ) {\n        const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n        b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport default FileManager;\n","/**\n * Key Manager for B2 API\n * Handles application key CRUD operations\n */\n\nimport { KEY_CAPABILITIES, B2_ERROR_CODES } from '../constants.js';\nimport { Validator } from '../utils/validation.js';\nimport { EndpointBuilder } from '../utils/endpoints.js';\n\nexport class KeyManager {\n  constructor(httpClient, authManager, config = {}) {\n    this.httpClient = httpClient;\n    this.authManager = authManager;\n    this.config = config;\n    this.endpointBuilder = new EndpointBuilder();\n  }\n\n  /**\n   * Validate key name according to B2 requirements\n   * @param {string} keyName - Key name to validate\n   * @throws {Error} If key name is invalid\n   */\n  validateKeyName(keyName) {\n    if (\n      keyName === null ||\n      keyName === undefined ||\n      typeof keyName !== 'string'\n    ) {\n      throw new Error('keyName is required and must be a string');\n    }\n\n    if (keyName.length < 1 || keyName.length > 100) {\n      throw new Error('Key name must be between 1 and 100 characters');\n    }\n\n    // Key name can contain letters, numbers, and some special characters\n    const validPattern = /^[a-zA-Z0-9\\-_\\.]+$/;\n    if (!validPattern.test(keyName)) {\n      throw new Error(\n        'Key name can only contain letters, numbers, hyphens, underscores, and periods'\n      );\n    }\n  }\n\n  /**\n   * Validate key capabilities\n   * @param {Array<string>} capabilities - Array of capabilities to validate\n   * @throws {Error} If capabilities are invalid\n   */\n  validateCapabilities(capabilities) {\n    if (!Array.isArray(capabilities)) {\n      throw new Error('capabilities must be an array');\n    }\n\n    if (capabilities.length === 0) {\n      throw new Error('At least one capability is required');\n    }\n\n    const validCapabilities = Object.values(KEY_CAPABILITIES);\n    for (const capability of capabilities) {\n      if (typeof capability !== 'string') {\n        throw new Error('All capabilities must be strings');\n      }\n      if (!validCapabilities.includes(capability)) {\n        throw new Error(\n          `Invalid capability: ${capability}. Must be one of: ${validCapabilities.join(', ')}`\n        );\n      }\n    }\n\n    // Remove duplicates\n    const uniqueCapabilities = [...new Set(capabilities)];\n    if (uniqueCapabilities.length !== capabilities.length) {\n      throw new Error('Duplicate capabilities are not allowed');\n    }\n  }\n\n  /**\n   * Validate key ID\n   * @param {string} applicationKeyId - Key ID to validate\n   * @throws {Error} If key ID is invalid\n   */\n  validateKeyId(applicationKeyId) {\n    if (\n      applicationKeyId === null ||\n      applicationKeyId === undefined ||\n      typeof applicationKeyId !== 'string'\n    ) {\n      throw new Error('applicationKeyId is required and must be a string');\n    }\n\n    if (applicationKeyId.trim().length === 0) {\n      throw new Error('applicationKeyId cannot be empty');\n    }\n  }\n\n  /**\n   * Validate bucket ID (optional parameter for key restrictions)\n   * @param {string} bucketId - Bucket ID to validate\n   * @throws {Error} If bucket ID is invalid\n   */\n  validateBucketId(bucketId) {\n    if (bucketId !== null && bucketId !== undefined) {\n      if (typeof bucketId !== 'string') {\n        throw new Error('bucketId must be a string or null');\n      }\n      if (bucketId.trim().length === 0) {\n        throw new Error('bucketId cannot be empty string');\n      }\n    }\n  }\n\n  /**\n   * Validate name prefix (optional parameter for key restrictions)\n   * @param {string} namePrefix - Name prefix to validate\n   * @throws {Error} If name prefix is invalid\n   */\n  validateNamePrefix(namePrefix) {\n    if (namePrefix !== null && namePrefix !== undefined) {\n      if (typeof namePrefix !== 'string') {\n        throw new Error('namePrefix must be a string or null');\n      }\n      // Empty string is allowed for namePrefix\n    }\n  }\n\n  /**\n   * Ensure authentication before making requests\n   * @throws {Error} If not authenticated\n   */\n  ensureAuthenticated() {\n    if (!this.authManager.isAuthenticated()) {\n      throw new Error('Not authenticated. Call authorize() first.');\n    }\n\n    // Update endpoint builder with current auth context\n    this.endpointBuilder.setAuthContext(this.authManager.getAuthContext());\n  }\n\n  /**\n   * Create a new application key\n   * @param {Object} options - Key creation options\n   * @param {string} options.keyName - Name for the new key\n   * @param {Array<string>} options.capabilities - Array of capabilities for the key\n   * @param {string} [options.bucketId] - Optional bucket ID to restrict key to specific bucket\n   * @param {string} [options.namePrefix] - Optional name prefix to restrict key to files with specific prefix\n   * @param {number} [options.validDurationInSeconds] - Optional duration in seconds for key validity\n   * @returns {Promise<Object>} Key creation response\n   */\n  async createKey(options) {\n    this.ensureAuthenticated();\n\n    if (!options || typeof options !== 'object') {\n      throw new Error('options object is required');\n    }\n\n    const {\n      keyName,\n      capabilities,\n      bucketId,\n      namePrefix,\n      validDurationInSeconds,\n    } = options;\n\n    // Validate required parameters\n    this.validateKeyName(keyName);\n    this.validateCapabilities(capabilities);\n\n    // Validate optional parameters\n    this.validateBucketId(bucketId);\n    this.validateNamePrefix(namePrefix);\n\n    if (validDurationInSeconds !== undefined) {\n      if (\n        typeof validDurationInSeconds !== 'number' ||\n        validDurationInSeconds <= 0\n      ) {\n        throw new Error('validDurationInSeconds must be a positive number');\n      }\n      if (validDurationInSeconds > 1000 * 24 * 60 * 60) {\n        // 1000 days in seconds\n        throw new Error('validDurationInSeconds cannot exceed 1000 days');\n      }\n    }\n\n    const requestData = {\n      accountId: this.authManager.getAccountId(),\n      keyName: keyName,\n      capabilities: capabilities,\n    };\n\n    // Add optional parameters if provided\n    if (bucketId) {\n      requestData.bucketId = bucketId;\n    }\n    if (namePrefix !== undefined) {\n      requestData.namePrefix = namePrefix;\n    }\n    if (validDurationInSeconds !== undefined) {\n      requestData.validDurationInSeconds = validDurationInSeconds;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getCreateKeyUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 key creation errors\n      if (error.status === 400) {\n        if (error.code === B2_ERROR_CODES.INVALID_BUCKET_ID) {\n          const b2Error = new Error(`Invalid bucket ID: ${bucketId}`);\n          b2Error.code = B2_ERROR_CODES.INVALID_BUCKET_ID;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n        if (error.code === B2_ERROR_CODES.NOT_ALLOWED) {\n          const b2Error = new Error(\n            'Not allowed to create keys with the specified capabilities'\n          );\n          b2Error.code = B2_ERROR_CODES.NOT_ALLOWED;\n          b2Error.status = 400;\n          throw b2Error;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Delete an application key\n   * @param {Object|string} options - Key deletion options or key ID (for backward compatibility)\n   * @param {string} options.applicationKeyId - ID of the key to delete\n   * @returns {Promise<Object>} Key deletion response\n   */\n  async deleteKey(options) {\n    this.ensureAuthenticated();\n\n    // Handle backward compatibility: deleteKey(applicationKeyId)\n    let applicationKeyId;\n    if (typeof options === 'string') {\n      applicationKeyId = options;\n    } else if (options && typeof options === 'object') {\n      applicationKeyId = options.applicationKeyId;\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with applicationKeyId or applicationKeyId as string'\n      );\n    }\n\n    // Validate inputs\n    this.validateKeyId(applicationKeyId);\n\n    const requestData = {\n      applicationKeyId: applicationKeyId,\n    };\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getDeleteKeyUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      // Handle specific B2 key deletion errors\n      if (error.status === 400) {\n        const b2Error = new Error(\n          `Invalid application key ID: ${applicationKeyId}`\n        );\n        b2Error.code = B2_ERROR_CODES.NOT_ALLOWED;\n        b2Error.status = 400;\n        throw b2Error;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * List application keys\n   * @param {Object} [options={}] - List options\n   * @param {number} [options.maxKeyCount] - Maximum number of keys to return (default 100, max 10000)\n   * @param {string} [options.startApplicationKeyId] - Key ID to start listing from (for pagination)\n   * @returns {Promise<Object>} List of keys response\n   */\n  async listKeys(options = {}) {\n    this.ensureAuthenticated();\n\n    if (options && typeof options !== 'object') {\n      throw new Error('options must be an object');\n    }\n\n    const { maxKeyCount, startApplicationKeyId } = options;\n\n    // Validate optional parameters\n    if (maxKeyCount !== undefined) {\n      if (\n        typeof maxKeyCount !== 'number' ||\n        maxKeyCount <= 0 ||\n        maxKeyCount > 10000\n      ) {\n        throw new Error('maxKeyCount must be a number between 1 and 10000');\n      }\n    }\n\n    if (startApplicationKeyId !== undefined) {\n      this.validateKeyId(startApplicationKeyId);\n    }\n\n    const requestData = {\n      accountId: this.authManager.getAccountId(),\n    };\n\n    // Add optional parameters if provided\n    if (maxKeyCount !== undefined) {\n      requestData.maxKeyCount = maxKeyCount;\n    }\n    if (startApplicationKeyId !== undefined) {\n      requestData.startApplicationKeyId = startApplicationKeyId;\n    }\n\n    try {\n      const response = await this.httpClient.post(\n        this.endpointBuilder.getListKeysUrl(),\n        requestData,\n        {\n          headers: this.authManager.getAuthHeaders(),\n          timeout: this.config.timeout,\n        }\n      );\n\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n// Export key capabilities for convenience\nexport { KEY_CAPABILITIES };\n\nexport default KeyManager;\n","/**\n * B2Client - Main client class for Backblaze B2 API\n * Orchestrates all manager classes and provides the public API interface\n */\n\nimport { HttpClient } from './core/http-client.js';\nimport { RetryHandler } from './core/retry-handler.js';\nimport { AuthManager } from './managers/auth-manager.js';\nimport { BucketManager } from './managers/bucket-manager.js';\nimport { FileManager } from './managers/file-manager.js';\nimport { KeyManager } from './managers/key-manager.js';\nimport { DEFAULT_CONFIG, BUCKET_TYPES, KEY_CAPABILITIES, B2_API_BASE_URL } from './constants.js';\n\nexport class B2Client {\n  constructor(options = {}) {\n    // Validate options\n    if (options && typeof options !== 'object') {\n      throw new Error('options must be an object');\n    }\n\n    // Handle legacy constructor parameters for backward compatibility\n    this.accountId = options.accountId || null;\n    this.applicationKeyId = options.applicationKeyId || null;\n    this.applicationKey = options.applicationKey || null;\n    this.apiUrl = options.apiUrl || B2_API_BASE_URL;\n\n    // Legacy properties for backward compatibility\n    this.authorizationToken = null;\n    this.downloadUrl = null;\n\n    // Store configuration with proper mapping\n    this.config = {\n      timeout: options.timeout || DEFAULT_CONFIG.REQUEST_TIMEOUT,\n      retries: options.retries || DEFAULT_CONFIG.RETRY_ATTEMPTS,\n      retryDelay: options.retryDelay || DEFAULT_CONFIG.RETRY_DELAY,\n      retryDelayMultiplier: options.retryDelayMultiplier || DEFAULT_CONFIG.RETRY_DELAY_MULTIPLIER,\n      maxRetryDelay: options.maxRetryDelay || DEFAULT_CONFIG.MAX_RETRY_DELAY,\n      headers: options.headers || {},\n      ...options\n    };\n\n    // Initialize HTTP client with retry handler\n    const retryOptions = {\n      retries: this.config.retries,\n      retryDelay: this.config.retryDelay,\n      retryDelayMultiplier: this.config.retryDelayMultiplier,\n      maxRetryDelay: this.config.maxRetryDelay,\n    };\n\n    this.retryHandler = new RetryHandler(retryOptions);\n\n    const httpOptions = {\n      baseURL: this.config.apiUrl,\n      timeout: this.config.timeout,\n      headers: this.config.headers,\n    };\n\n    this.httpClient = new HttpClient(httpOptions);\n\n    // Initialize managers\n    this.authManager = new AuthManager(this.httpClient, this.config);\n    this.bucketManager = new BucketManager(\n      this.httpClient,\n      this.authManager,\n      this.config\n    );\n    this.fileManager = new FileManager(\n      this.httpClient,\n      this.authManager,\n      this.config\n    );\n    this.keyManager = new KeyManager(\n      this.httpClient,\n      this.authManager,\n      this.config\n    );\n\n    // Store credentials for potential re-authentication\n    this.credentials = null;\n\n    // Add backward compatibility constants as instance properties\n    this.BUCKET_TYPES = BUCKET_TYPES;\n    this.KEY_CAPABILITIES = KEY_CAPABILITIES;\n  }\n\n  // ===== AUTHENTICATION METHODS =====\n\n  /**\n   * Authorize with B2 API using application credentials\n   * @param {Object|string} options - Authentication options or applicationKeyId (for backward compatibility)\n   * @param {string} options.applicationKeyId - Application key ID\n   * @param {string} options.applicationKey - Application key\n   * @param {string} [applicationKey] - Application key (for backward compatibility when first param is string)\n   * @returns {Promise<Object>} Authentication response\n   */\n  async authorize(options, applicationKey) {\n    // Handle backward compatibility: authorize(applicationKeyId, applicationKey)\n    let credentials;\n    if (typeof options === 'string') {\n      credentials = {\n        applicationKeyId: options,\n        applicationKey: applicationKey,\n      };\n    } else if (options && typeof options === 'object') {\n      credentials = {\n        applicationKeyId: options.applicationKeyId,\n        applicationKey: options.applicationKey,\n      };\n    } else if (!options && this.applicationKeyId && this.applicationKey) {\n      // Use instance properties if no arguments provided (legacy behavior)\n      credentials = {\n        applicationKeyId: this.applicationKeyId,\n        applicationKey: this.applicationKey,\n      };\n    } else {\n      throw new Error(\n        'Invalid arguments. Expected object with applicationKeyId and applicationKey, or applicationKeyId and applicationKey as separate strings'\n      );\n    }\n\n    // Store credentials for potential re-authentication\n    this.credentials = credentials;\n\n    // Delegate to auth manager with retry handling\n    const response = await this.retryHandler.executeWithRetry(async () => {\n      return this.authManager.authorize(credentials, {\n        timeout: this.config.timeout,\n      });\n    });\n\n    // Update legacy instance properties for backward compatibility\n    if (response && response.data) {\n      this.authorizationToken = response.data.authorizationToken;\n      this.apiUrl = response.data.apiUrl;\n      this.downloadUrl = response.data.downloadUrl;\n    }\n\n    return response;\n  }\n\n  // ===== BUCKET METHODS =====\n\n  /**\n   * Create a new bucket\n   * @param {Object|string} options - Bucket creation options or bucket name (for backward compatibility)\n   * @param {string} options.bucketName - Name of the bucket to create\n   * @param {string} options.bucketType - Type of bucket (allPublic or allPrivate)\n   * @param {string} [bucketType] - Bucket type (for backward compatibility when first param is string)\n   * @returns {Promise<Object>} Bucket creation response\n   */\n  async createBucket(options, bucketType) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.bucketManager.create(options, bucketType);\n    });\n  }\n\n  /**\n   * Delete a bucket\n   * @param {Object|string} options - Bucket deletion options or bucket ID (for backward compatibility)\n   * @param {string} options.bucketId - ID of the bucket to delete\n   * @returns {Promise<Object>} Bucket deletion response\n   */\n  async deleteBucket(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.bucketManager.delete(options);\n    });\n  }\n\n  /**\n   * List buckets\n   * @param {Object} [options={}] - List options\n   * @returns {Promise<Object>} List of buckets response\n   */\n  async listBuckets(options = {}) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.bucketManager.list(options);\n    });\n  }\n\n  /**\n   * Get bucket information by name or ID\n   * @param {Object} options - Get bucket options\n   * @param {string} [options.bucketName] - Name of the bucket to get\n   * @param {string} [options.bucketId] - ID of the bucket to get\n   * @returns {Promise<Object>} Bucket information response\n   */\n  async getBucket(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.bucketManager.get(options);\n    });\n  }\n\n  /**\n   * Update bucket type\n   * @param {Object|string} options - Bucket update options or bucket ID (for backward compatibility)\n   * @param {string} options.bucketId - ID of the bucket to update\n   * @param {string} options.bucketType - New bucket type\n   * @param {string} [bucketType] - New bucket type (for backward compatibility when first param is string)\n   * @returns {Promise<Object>} Bucket update response\n   */\n  async updateBucket(options, bucketType) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.bucketManager.update(options, bucketType);\n    });\n  }\n\n  /**\n   * Get upload URL for a bucket\n   * @param {Object|string} options - Upload URL options or bucket ID (for backward compatibility)\n   * @param {string} options.bucketId - ID of the bucket to get upload URL for\n   * @returns {Promise<Object>} Upload URL response\n   */\n  async getUploadUrl(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.bucketManager.getUploadUrl(options);\n    });\n  }\n\n  // ===== FILE METHODS =====\n\n  /**\n   * Upload a file to B2\n   * @param {Object} options - Upload options\n   * @param {string} options.uploadUrl - Upload URL from getUploadUrl\n   * @param {string} options.uploadAuthToken - Upload authorization token\n   * @param {string} options.fileName - Name of the file\n   * @param {Buffer|Uint8Array|string} options.data - File data to upload\n   * @param {string} [options.contentType] - Content type (defaults to application/octet-stream)\n   * @param {string} [options.contentSha1] - SHA1 hash of content (will be calculated if not provided)\n   * @param {Object} [options.info] - File info metadata\n   * @param {Function} [options.onUploadProgress] - Progress callback function\n   * @returns {Promise<Object>} Upload response\n   */\n  async uploadFile(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.uploadFile(options);\n    });\n  }\n\n  /**\n   * Download a file by name\n   * @param {Object|string} options - Download options or bucket name (for backward compatibility)\n   * @param {string} options.bucketName - Name of the bucket containing the file\n   * @param {string} options.fileName - Name of the file to download\n   * @param {string} [options.responseType] - Response type: 'json', 'text', 'arraybuffer', 'blob', 'stream' (default: 'arraybuffer')\n   * @param {Function} [options.onDownloadProgress] - Progress callback function\n   * @param {Object} [options.headers] - Additional headers for the request\n   * @param {string} [fileName] - File name (for backward compatibility when first param is bucket name)\n   * @returns {Promise<Object>} Download response with file data\n   */\n  async downloadFileByName(options, fileName) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.downloadFileByName(options, fileName);\n    });\n  }\n\n  /**\n   * Download a file by ID\n   * @param {Object|string} options - Download options or file ID (for backward compatibility)\n   * @param {string} options.fileId - ID of the file to download\n   * @param {string} [options.responseType] - Response type: 'json', 'text', 'arraybuffer', 'blob', 'stream' (default: 'arraybuffer')\n   * @param {Function} [options.onDownloadProgress] - Progress callback function\n   * @param {Object} [options.headers] - Additional headers for the request\n   * @returns {Promise<Object>} Download response with file data\n   */\n  async downloadFileById(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.downloadFileById(options);\n    });\n  }\n\n  /**\n   * List file names in a bucket\n   * @param {Object} options - List options\n   * @param {string} options.bucketId - ID of the bucket to list files from\n   * @param {string} [options.startFileName] - File name to start listing from\n   * @param {number} [options.maxFileCount] - Maximum number of files to return (default: 100, max: 10000)\n   * @param {string} [options.prefix] - Only return file names that start with this prefix\n   * @param {string} [options.delimiter] - Delimiter for grouping file names\n   * @returns {Promise<Object>} List of file names response\n   */\n  async listFileNames(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.listFileNames(options);\n    });\n  }\n\n  /**\n   * List file versions in a bucket\n   * @param {Object} options - List options\n   * @param {string} options.bucketId - ID of the bucket to list file versions from\n   * @param {string} [options.startFileName] - File name to start listing from\n   * @param {string} [options.startFileId] - File ID to start listing from\n   * @param {number} [options.maxFileCount] - Maximum number of file versions to return (default: 100, max: 10000)\n   * @param {string} [options.prefix] - Only return file names that start with this prefix\n   * @param {string} [options.delimiter] - Delimiter for grouping file names\n   * @returns {Promise<Object>} List of file versions response\n   */\n  async listFileVersions(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.listFileVersions(options);\n    });\n  }\n\n  /**\n   * Get file information\n   * @param {Object|string} options - File info options or file ID (for backward compatibility)\n   * @param {string} options.fileId - ID of the file to get info for\n   * @returns {Promise<Object>} File information response\n   */\n  async getFileInfo(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.getFileInfo(options);\n    });\n  }\n\n  /**\n   * Delete a file version\n   * @param {Object} options - Delete options\n   * @param {string} options.fileId - ID of the file to delete\n   * @param {string} options.fileName - Name of the file to delete\n   * @returns {Promise<Object>} Delete response\n   */\n  async deleteFileVersion(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.deleteFileVersion(options);\n    });\n  }\n\n  /**\n   * Hide a file (make it invisible in file listings)\n   * @param {Object} options - Hide file options\n   * @param {string} options.bucketId - ID of the bucket containing the file\n   * @param {string} options.fileName - Name of the file to hide\n   * @returns {Promise<Object>} Hide file response\n   */\n  async hideFile(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.hideFile(options);\n    });\n  }\n\n  /**\n   * Get download authorization for private files\n   * @param {Object} options - Download authorization options\n   * @param {string} options.bucketId - ID of the bucket containing the files\n   * @param {string} options.fileNamePrefix - Prefix of file names to authorize (can be empty string for all files)\n   * @param {number} [options.validDurationInSeconds] - How long the authorization is valid (default: 604800 = 7 days, max: 604800)\n   * @param {string} [options.b2ContentDisposition] - Content-Disposition header value for downloads\n   * @returns {Promise<Object>} Download authorization response\n   */\n  async getDownloadAuthorization(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.getDownloadAuthorization(options);\n    });\n  }\n\n  // ===== LARGE FILE METHODS =====\n\n  /**\n   * Start a large file upload\n   * @param {Object} options - Start large file options\n   * @param {string} options.bucketId - ID of the bucket to upload to\n   * @param {string} options.fileName - Name of the file to upload\n   * @param {string} [options.contentType] - Content type (defaults to application/octet-stream)\n   * @param {Object} [options.fileInfo] - File info metadata\n   * @returns {Promise<Object>} Start large file response containing fileId\n   */\n  async startLargeFile(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.startLargeFile(options);\n    });\n  }\n\n  /**\n   * Get upload URL for a large file part\n   * @param {Object} options - Get upload part URL options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @returns {Promise<Object>} Upload part URL response containing uploadUrl and authorizationToken\n   */\n  async getUploadPartUrl(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.getUploadPartUrl(options);\n    });\n  }\n\n  /**\n   * Upload a part of a large file\n   * @param {Object} options - Upload part options\n   * @param {string} options.uploadUrl - Upload URL from getUploadPartUrl\n   * @param {string} options.authorizationToken - Authorization token from getUploadPartUrl\n   * @param {number} options.partNumber - Part number (1-based, must be between 1 and 10000)\n   * @param {Buffer|Uint8Array|string} options.data - Part data to upload\n   * @param {string} [options.contentSha1] - SHA1 hash of part content (will be calculated if not provided)\n   * @param {Function} [options.onUploadProgress] - Progress callback function\n   * @returns {Promise<Object>} Upload part response\n   */\n  async uploadPart(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.uploadPart(options);\n    });\n  }\n\n  /**\n   * Finish a large file upload\n   * @param {Object} options - Finish large file options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @param {Array<string>} options.partSha1Array - Array of SHA1 hashes for each part in order\n   * @returns {Promise<Object>} Finish large file response\n   */\n  async finishLargeFile(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.finishLargeFile(options);\n    });\n  }\n\n  /**\n   * Cancel a large file upload\n   * @param {Object} options - Cancel large file options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @returns {Promise<Object>} Cancel large file response\n   */\n  async cancelLargeFile(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.cancelLargeFile(options);\n    });\n  }\n\n  /**\n   * List parts of a large file upload\n   * @param {Object} options - List parts options\n   * @param {string} options.fileId - ID of the large file from startLargeFile\n   * @param {number} [options.startPartNumber] - Part number to start listing from\n   * @param {number} [options.maxPartCount] - Maximum number of parts to return (default: 100, max: 10000)\n   * @returns {Promise<Object>} List parts response\n   */\n  async listParts(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.listParts(options);\n    });\n  }\n\n  /**\n   * List unfinished large file uploads\n   * @param {Object} options - List unfinished large files options\n   * @param {string} options.bucketId - ID of the bucket to list unfinished files from\n   * @param {string} [options.startFileId] - File ID to start listing from\n   * @param {number} [options.maxFileCount] - Maximum number of files to return (default: 100, max: 10000)\n   * @returns {Promise<Object>} List unfinished large files response\n   */\n  async listUnfinishedLargeFiles(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.fileManager.listUnfinishedLargeFiles(options);\n    });\n  }\n\n  // ===== KEY MANAGEMENT METHODS =====\n\n  /**\n   * Create a new application key\n   * @param {Object} options - Key creation options\n   * @param {string} options.keyName - Name for the new key\n   * @param {Array<string>} options.capabilities - Array of capabilities for the key\n   * @param {string} [options.bucketId] - Optional bucket ID to restrict key to specific bucket\n   * @param {string} [options.namePrefix] - Optional name prefix to restrict key to files with specific prefix\n   * @param {number} [options.validDurationInSeconds] - Optional duration in seconds for key validity\n   * @returns {Promise<Object>} Key creation response\n   */\n  async createKey(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.keyManager.createKey(options);\n    });\n  }\n\n  /**\n   * Delete an application key\n   * @param {Object|string} options - Key deletion options or key ID (for backward compatibility)\n   * @param {string} options.applicationKeyId - ID of the key to delete\n   * @returns {Promise<Object>} Key deletion response\n   */\n  async deleteKey(options) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.keyManager.deleteKey(options);\n    });\n  }\n\n  /**\n   * List application keys\n   * @param {Object} [options={}] - List options\n   * @param {number} [options.maxKeyCount] - Maximum number of keys to return (default 100, max 10000)\n   * @param {string} [options.startApplicationKeyId] - Key ID to start listing from (for pagination)\n   * @returns {Promise<Object>} List of keys response\n   */\n  async listKeys(options = {}) {\n    return this.retryHandler.executeWithRetry(async () => {\n      return this.keyManager.listKeys(options);\n    });\n  }\n\n  // ===== UTILITY METHODS =====\n\n  /**\n   * Check if currently authenticated\n   * @returns {boolean} True if authenticated\n   */\n  isAuthenticated() {\n    return this.authManager.isAuthenticated();\n  }\n\n  /**\n   * Get current authentication context\n   * @returns {Object} Current auth context\n   */\n  getAuthContext() {\n    return this.authManager.getAuthContext();\n  }\n\n  /**\n   * Clear authentication context\n   */\n  clearAuth() {\n    this.authManager.clearAuthContext();\n    this.credentials = null;\n\n    // Clear legacy instance properties\n    this.authorizationToken = null;\n    this.apiUrl = null;\n    this.downloadUrl = null;\n  }\n\n  /**\n   * Refresh authentication using stored credentials\n   * @returns {Promise<Object>} New authentication response\n   * @throws {Error} If no credentials are stored\n   */\n  async refreshAuth() {\n    if (!this.credentials) {\n      throw new Error('No credentials stored. Call authorize() first.');\n    }\n\n    return this.authorize(this.credentials);\n  }\n\n  /**\n   * Manually set authentication context from B2 API response\n   * @param {Object} authResponse - Authentication response from B2 API\n   * @param {string} authResponse.authorizationToken - Authorization token\n   * @param {string} authResponse.apiUrl - API URL for requests\n   * @param {string} authResponse.downloadUrl - Download URL for files\n   * @param {string} authResponse.accountId - Account ID\n   * @param {number} [authResponse.recommendedPartSize] - Recommended part size for large files\n   * @param {number} [authResponse.absoluteMinimumPartSize] - Minimum part size for large files\n   * @param {Object} [authResponse.allowed] - Allowed capabilities and restrictions\n   */\n  saveAuthContext(authResponse) {\n    // Delegate to auth manager\n    this.authManager.saveAuthContext(authResponse);\n\n    // Update legacy instance properties for backward compatibility\n    if (authResponse && typeof authResponse === 'object') {\n      this.authorizationToken = authResponse.authorizationToken || null;\n      this.apiUrl = authResponse.apiUrl || null;\n      this.downloadUrl = authResponse.downloadUrl || null;\n    }\n  }\n}\n\n// Export constants for backward compatibility\nexport { BUCKET_TYPES, KEY_CAPABILITIES };\n\nexport default B2Client;\n","/**\n * Comprehensive error handling system for B2 API\n * Provides error classification, formatting, and B2-specific error handling\n */\n\nimport {\n  HTTP_STATUS,\n  B2_ERROR_CODES,\n  RETRYABLE_STATUS_CODES,\n  RETRYABLE_ERROR_CODES,\n} from '../constants.js';\n\n/**\n * B2Error class extending Error with additional B2-specific properties\n */\nexport class B2Error extends Error {\n  constructor(message, options = {}) {\n    super(message);\n\n    this.name = 'B2Error';\n    this.status = options.status;\n    this.statusText = options.statusText;\n    this.code = options.code;\n    this.response = options.response;\n    this.request = options.request;\n    this.isRetryable = options.isRetryable ?? false;\n    this.isNetworkError = options.isNetworkError ?? false;\n    this.isHttpError = options.isHttpError ?? false;\n    this.retryAttempts = options.retryAttempts ?? 0;\n    this.isRetryExhausted = options.isRetryExhausted ?? false;\n\n    // Preserve stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, B2Error);\n    }\n  }\n\n  /**\n   * Convert error to JSON representation\n   * @returns {Object} JSON representation of the error\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      statusText: this.statusText,\n      code: this.code,\n      isRetryable: this.isRetryable,\n      isNetworkError: this.isNetworkError,\n      isHttpError: this.isHttpError,\n      retryAttempts: this.retryAttempts,\n      isRetryExhausted: this.isRetryExhausted,\n      stack: this.stack,\n    };\n  }\n\n  /**\n   * Get a human-readable description of the error\n   * @returns {string} Error description\n   */\n  getDescription() {\n    if (this.isNetworkError) {\n      return `Network error: ${this.message}`;\n    }\n\n    if (this.status) {\n      const statusInfo = this.statusText ? ` ${this.statusText}` : '';\n      const codeInfo = this.code ? ` (${this.code})` : '';\n      return `HTTP ${this.status}${statusInfo}${codeInfo}: ${this.message}`;\n    }\n\n    return this.message;\n  }\n}\n\n/**\n * Error Handler class for processing and classifying errors\n */\nexport class ErrorHandler {\n  constructor(options = {}) {\n    this.debug = options.debug ?? false;\n    this.logger = options.logger || console;\n  }\n\n  /**\n   * Determine if an error is retryable based on status code and error code\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether the error is retryable\n   */\n  isRetryable(error) {\n    // Network errors are generally retryable\n    if (error.isNetworkError) {\n      return true;\n    }\n\n    // Check HTTP status codes\n    if (error.status && RETRYABLE_STATUS_CODES.has(error.status)) {\n      return true;\n    }\n\n    // Check B2-specific error codes\n    if (error.code && RETRYABLE_ERROR_CODES.has(error.code)) {\n      return true;\n    }\n\n    // Server errors (5xx) are generally retryable\n    if (error.status >= 500 && error.status < 600) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Classify error type based on status code and error properties\n   * @param {Error} error - Error to classify\n   * @returns {string} Error classification\n   */\n  classifyError(error) {\n    if (error.isNetworkError) {\n      return 'NETWORK_ERROR';\n    }\n\n    if (!error.status) {\n      return 'UNKNOWN_ERROR';\n    }\n\n    if (error.status === HTTP_STATUS.UNAUTHORIZED) {\n      return 'AUTHENTICATION_ERROR';\n    }\n\n    if (error.status === HTTP_STATUS.FORBIDDEN) {\n      return 'AUTHORIZATION_ERROR';\n    }\n\n    if (error.status === HTTP_STATUS.NOT_FOUND) {\n      return 'NOT_FOUND_ERROR';\n    }\n\n    if (error.status === HTTP_STATUS.TOO_MANY_REQUESTS) {\n      return 'RATE_LIMIT_ERROR';\n    }\n\n    if (error.status === HTTP_STATUS.REQUEST_TIMEOUT) {\n      return 'TIMEOUT_ERROR';\n    }\n\n    if (error.status >= 400 && error.status < 500) {\n      return 'CLIENT_ERROR';\n    }\n\n    if (error.status >= 500 && error.status < 600) {\n      return 'SERVER_ERROR';\n    }\n\n    return 'HTTP_ERROR';\n  }\n\n  /**\n   * Parse B2 API error response\n   * @param {Object} response - HTTP response object\n   * @param {any} data - Response data\n   * @returns {Object} Parsed error information\n   */\n  parseB2ErrorResponse(response, data) {\n    let errorCode = null;\n    let errorMessage = null;\n\n    // Try to extract B2-specific error information\n    if (data && typeof data === 'object') {\n      errorCode = data.code || data.error_code || null;\n      errorMessage = data.message || data.error_message || data.error || null;\n    }\n\n    // Fallback to HTTP status information\n    if (!errorMessage) {\n      errorMessage = response.statusText || `HTTP ${response.status}`;\n    }\n\n    return {\n      code: errorCode,\n      message: errorMessage,\n      status: response.status,\n      statusText: response.statusText,\n    };\n  }\n\n  /**\n   * Create B2Error from HTTP response\n   * @param {Object} response - HTTP response object\n   * @param {any} data - Response data\n   * @param {Object} request - Original request information\n   * @returns {B2Error} Formatted B2Error\n   */\n  createHttpError(response, data, request = null) {\n    const errorInfo = this.parseB2ErrorResponse(response, data);\n    const isRetryable = this.isRetryable({\n      status: errorInfo.status,\n      code: errorInfo.code,\n    });\n\n    const error = new B2Error(errorInfo.message, {\n      status: errorInfo.status,\n      statusText: errorInfo.statusText,\n      code: errorInfo.code,\n      response: {\n        status: response.status,\n        statusText: response.statusText,\n        headers: response.headers,\n        data: data,\n      },\n      request: request,\n      isRetryable: isRetryable,\n      isHttpError: true,\n    });\n\n    if (this.debug) {\n      this.logger.error('HTTP Error:', error.toJSON());\n    }\n\n    return error;\n  }\n\n  /**\n   * Create B2Error from network error\n   * @param {Error} originalError - Original network error\n   * @param {Object} request - Original request information\n   * @returns {B2Error} Formatted B2Error\n   */\n  createNetworkError(originalError, request = null) {\n    let message = 'Network error occurred';\n    let code = 'NETWORK_ERROR';\n\n    if (originalError.name === 'AbortError') {\n      message = 'Request timeout';\n      code = 'TIMEOUT';\n    } else if (originalError.message) {\n      message = `Network error: ${originalError.message}`;\n    }\n\n    const error = new B2Error(message, {\n      code: code,\n      request: request,\n      isRetryable: true,\n      isNetworkError: true,\n    });\n\n    // Add originalError as a separate property\n    error.originalError = originalError;\n\n    if (this.debug) {\n      this.logger.error('Network Error:', error.toJSON());\n    }\n\n    return error;\n  }\n\n  /**\n   * Create B2Error from authentication failure\n   * @param {string} message - Error message\n   * @param {Object} response - HTTP response (optional)\n   * @returns {B2Error} Formatted B2Error\n   */\n  createAuthError(message, response = null) {\n    const error = new B2Error(message, {\n      status: HTTP_STATUS.UNAUTHORIZED,\n      statusText: 'Unauthorized',\n      code: B2_ERROR_CODES.BAD_AUTH_TOKEN,\n      response: response,\n      isRetryable: false,\n      isHttpError: true,\n    });\n\n    if (this.debug) {\n      this.logger.error('Authentication Error:', error.toJSON());\n    }\n\n    return error;\n  }\n\n  /**\n   * Create B2Error from validation failure\n   * @param {string} message - Error message\n   * @param {string} field - Field that failed validation (optional)\n   * @returns {B2Error} Formatted B2Error\n   */\n  createValidationError(message, field = null) {\n    const fullMessage = field\n      ? `Validation error for ${field}: ${message}`\n      : `Validation error: ${message}`;\n\n    const error = new B2Error(fullMessage, {\n      status: HTTP_STATUS.BAD_REQUEST,\n      statusText: 'Bad Request',\n      code: 'VALIDATION_ERROR',\n      isRetryable: false,\n      isHttpError: false,\n    });\n\n    // Add field as a separate property\n    if (field) {\n      error.field = field;\n    }\n\n    if (this.debug) {\n      this.logger.error('Validation Error:', error.toJSON());\n    }\n\n    return error;\n  }\n\n  /**\n   * Enhance existing error with additional context\n   * @param {Error} error - Original error\n   * @param {Object} context - Additional context\n   * @returns {B2Error} Enhanced error\n   */\n  enhanceError(error, context = {}) {\n    if (error instanceof B2Error) {\n      // Update existing B2Error with additional context\n      Object.assign(error, context);\n      return error;\n    }\n\n    // Convert regular Error to B2Error\n    const b2Error = new B2Error(error.message, {\n      ...context,\n      stack: error.stack,\n    });\n\n    // Add originalError as a separate property\n    b2Error.originalError = error;\n\n    return b2Error;\n  }\n\n  /**\n   * Format error for logging or display\n   * @param {Error} error - Error to format\n   * @param {boolean} includeStack - Whether to include stack trace\n   * @returns {Object} Formatted error information\n   */\n  formatError(error, includeStack = false) {\n    const formatted = {\n      type: this.classifyError(error),\n      message: error.message,\n      description:\n        error instanceof B2Error ? error.getDescription() : error.message,\n    };\n\n    if (error.status) {\n      formatted.status = error.status;\n      formatted.statusText = error.statusText;\n    }\n\n    if (error.code) {\n      formatted.code = error.code;\n    }\n\n    if (error.isRetryable !== undefined) {\n      formatted.isRetryable = error.isRetryable;\n    }\n\n    if (error.retryAttempts !== undefined) {\n      formatted.retryAttempts = error.retryAttempts;\n    }\n\n    if (includeStack && error.stack) {\n      formatted.stack = error.stack;\n    }\n\n    return formatted;\n  }\n\n  /**\n   * Log error with appropriate level based on error type\n   * @param {Error} error - Error to log\n   * @param {Object} context - Additional context for logging\n   */\n  logError(error, context = {}) {\n    if (!this.debug) {\n      return;\n    }\n\n    const formatted = this.formatError(error, true);\n    const logContext = { ...formatted, ...context };\n\n    if (error.isNetworkError || (error.status && error.status >= 500)) {\n      this.logger.error('B2 Error:', logContext);\n    } else if (error.status && error.status >= 400) {\n      this.logger.warn('B2 Client Error:', logContext);\n    } else {\n      this.logger.info('B2 Info:', logContext);\n    }\n  }\n\n  /**\n   * Check if error indicates expired authentication\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error indicates expired auth\n   */\n  isAuthExpired(error) {\n    return (\n      error.status === HTTP_STATUS.UNAUTHORIZED ||\n      error.code === B2_ERROR_CODES.EXPIRED_AUTH_TOKEN ||\n      error.code === B2_ERROR_CODES.BAD_AUTH_TOKEN\n    );\n  }\n\n  /**\n   * Check if error indicates rate limiting\n   * @param {Error} error - Error to check\n   * @returns {boolean} Whether error indicates rate limiting\n   */\n  isRateLimited(error) {\n    return (\n      error.status === HTTP_STATUS.TOO_MANY_REQUESTS ||\n      error.code === B2_ERROR_CODES.TOO_MANY_REQUESTS\n    );\n  }\n\n  /**\n   * Get suggested retry delay for rate limited requests\n   * @param {Error} error - Rate limit error\n   * @returns {number} Suggested delay in milliseconds\n   */\n  getRateLimitDelay(error) {\n    // Check for Retry-After header\n    if (error.response && error.response.headers) {\n      const retryAfter = error.response.headers.get('Retry-After');\n      if (retryAfter) {\n        const delay = parseInt(retryAfter, 10);\n        if (!isNaN(delay)) {\n          return delay * 1000; // Convert seconds to milliseconds\n        }\n      }\n    }\n\n    // Default rate limit delay\n    return 60000; // 1 minute\n  }\n}\n\nexport default ErrorHandler;\n","/**\n * Main entry point for the Backblaze B2 Node.js Library\n * Provides ES module exports with CommonJS compatibility\n * Optimized for tree-shaking - only import what you need\n */\n\n// Main client class - primary export\nexport { B2Client } from './b2-client.js';\n\n// Constants for backward compatibility\nexport { BUCKET_TYPES, KEY_CAPABILITIES } from './constants.js';\n\n// Core classes (for advanced usage - tree-shakeable)\nexport { HttpClient } from './core/http-client.js';\nexport { RetryHandler } from './core/retry-handler.js';\nexport { ErrorHandler, B2Error } from './core/error-handler.js';\nexport { ProgressHandler } from './core/progress-handler.js';\n\n// Manager classes (for advanced usage - tree-shakeable)\nexport { AuthManager } from './managers/auth-manager.js';\nexport { BucketManager } from './managers/bucket-manager.js';\nexport { FileManager } from './managers/file-manager.js';\nexport { KeyManager } from './managers/key-manager.js';\n\n// Utility classes (for advanced usage - tree-shakeable)\nexport { EndpointBuilder } from './utils/endpoints.js';\nexport { AuthHeaders, HeaderUtils } from './utils/headers.js';\nexport { Validator } from './utils/validation.js';\nexport { Sha1Hasher } from './utils/crypto.js';\n\n// Import for default export\nimport { B2Client } from './b2-client.js';\n\n// Default export for backward compatibility (CommonJS)\nexport default B2Client;\n"],"names":[],"mappings":"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"}